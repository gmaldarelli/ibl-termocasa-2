

@page "/consumption-estimations"

@attribute [Authorize(IBLTermocasaPermissions.ConsumptionEstimations.Default)]
@using System.Globalization
@using IBLTermocasa.Blazor.Components.Product
@using IBLTermocasa.Common
@using IBLTermocasa.ConsumptionEstimations
@using IBLTermocasa.Localization
@using Microsoft.AspNetCore.Authorization
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout

@using IBLTermocasa.Permissions
@using IBLTermocasa.Shared
@using Volo.Abp.AspNetCore.Components.Web
@using Volo.Abp.Http.Client
@using Position = MudBlazor.Position
@using MudBlazor
@using Size = MudBlazor.Size
@using Color = MudBlazor.Color
@inherits IBLTermocasaComponentBase
@inject IConsumptionEstimationsAppService ConsumptionEstimationsAppService

@inject IUiMessageService UiMessageService
@inject AbpBlazorMessageLocalizerHelper<IBLTermocasaResource> LH
@inject IRemoteServiceConfigurationProvider RemoteServiceConfigurationProvider
@inject NavigationManager NavigationManager

@* ************************* PAGE HEADER ************************* *@
<PageHeader Title="@L["ConsumptionEstimations"]" BreadcrumbItems="BreadcrumbItems" Toolbar="Toolbar">

</PageHeader>

<MudPaper Style="overflow:hidden; position:relative; height: 80vh">
    <MudDrawerContainer Class="mud-height-full" Style="height: 100%;">
        <MudDrawer @bind-Open="@_open" Elevation="0" Variant="@DrawerVariant.Persistent" 
                   Color="Color.Transparent" Width="30%" Height="100%"  Style="min-height: 350px">
            <MudDrawerHeader Style="min-width: 300px; width: 300px;">
                <MudText Align="Align.Center" 
                         Style="box-shadow: 0 2px #cdcdcd;">@L["ProductsList"]</MudText>
            </MudDrawerHeader>
            <MudPaper Style="overflow:hidden; position:relative; height: 100%;">
                <MudList @ref="MudListProductsList" Clickable="true" Style="overflow-y: auto;" >
                    @foreach (var product in ProductsList)
                    {
                        <MudListItem @ref="_tempMudListItemReferences[product.Id]"
                                     Id="@($"mudListItem-{product.Id}")"
                                     OnClick="() => OnClickSelectProduct(product)"
                                     Text="@product.DisplayName"
                                     Tag="@product.Id">
                        </MudListItem>
                    }
                </MudList>
            </MudPaper>
        </MudDrawer>
        <MudDrawer @bind-Open="@_openEnd" Fixed="false" Anchor="MudBlazor.Anchor.End" Elevation="0" 
                   Variant="@DrawerVariant.Persistent"
                   Width="30%" Height="100%">
            <MudDrawerHeader >
                <MudText Align="Align.Center"
                         Style="box-shadow: 0 2px #cdcdcd;">@L["ProductVariables"]</MudText>
            </MudDrawerHeader>
            <MudPaper Elevation="0">
                <MudTreeView T="PlaceHolderTreeItemData" Hover
                             @ref="ProductMudTreeView" Items="TreeItems" MultiSelection="false">
                    <ItemTemplate>
                        <MudTreeViewItem @bind-Expanded="@context.IsExpanded"
                                         Items="@context.TreeItems"
                                         Icon="@context.Icon"
                                         LoadingIconColor="Color.Info"
                                         Text="@context.CodeAndName"
                                         OnDoubleClick="() => OnDoubleClickSelectConsumptionComponent(context)"/>
                    </ItemTemplate>
                </MudTreeView>
            </MudPaper>
        </MudDrawer>
        
        <div class="d-flex justify-content-start align-left">
            <MudPaper Elevation="25" Class="w-100">
                <MudToolBar>
                    <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Info" Class="mr-5" OnClick="@ToggleDrawer"/>
                    <MudIconButton Icon="@Icons.Material.Outlined.Save" Color="Color.Primary" Class="mr-5" OnClick="@OnClickSaveConsumptionComponent"/>
                    @if (MudTabsConsumptionEstimationsActiveIndex == 1)
                    {
                        <MudIconButton Icon="@Icons.Material.Outlined.Add" Color="Color.Primary" Class="mr-5" OnClick="@OnClickAddProfessionaProfile"/>
                    }
                    
                    <MudSpacer />
                    @if(SelectedProduct != null)
                    {
                        <MudText Typo="Typo.h5">@SelectedProduct.CodeAndName</MudText>
                    }
                    <MudSpacer />
                    <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Info" Class="mr-5" OnClick="@ToggleEndDrawer"/>
                    
                </MudToolBar>
                <MudTabs Outlined="true" Position="Position.Top" Rounded="true" Border="true"  ActivePanelIndexChanged="OnActivePanelIndexChanged"
                          ApplyEffectsToContainer="true" PanelClass="pa-2 " Style="overflow-y: auto; height: 73vh;" @ref="MudTabsConsumptionEstimations">
                    <MudTabPanel Text="@L["ConsumptionComponent"]" @ref="MudTabPanelConsumptionComponent">
                        @if (SelectedConsumptionEstimation != null)
                        {
                            <MudPaper Elevation="0">
                                <MudList>
                                    @foreach (var item in SelectedConsumptionEstimation.ConsumptionProduct)
                                    {
                                        <MudListItem>
                                            <MudText Typo="Typo.h6">@item.ConsumptionComponentCodeAndName - {@item.ConsumptionComponentLabel}</MudText>
                                            <MudTextField T="string" @bind-Value="@item.ConsumptionComponentFormula" Label="@L["Formula"]"
                                                          Id="@($"consumptionComponentField-{item.Id}")"
                                                          OnBlur="() => OnBlurConsumptionComponentFormula(item)"/>
                                        </MudListItem>
                                    }
                                </MudList>
                            </MudPaper>
                        }
                    </MudTabPanel>
                    <MudTabPanel Text="@L["ConsumptionProfessionalProfile"]" @ref="MudTabPanelConsumptionProfessional">
                        @if (SelectedConsumptionEstimation != null)
                        {
                            <MudDataGrid Items="@SelectedConsumptionEstimation.ConsumptionWork" ReadOnly="true" Filterable="false" Groupable="true" GroupExpanded="true">
                                <Columns>
                                    <TemplateColumn CellClass="d-table-cell" Title="@L["Product"]" >
                                        <CellTemplate>
                                            @if (context.Item.CostType == CostType.CALCULATED_FOR_PRODUCT || context.Item.CostType == null)
                                            {
                                                if(context.Item.CostType == null)
                                                {
                                                    context.Item.CostType = CostType.CALCULATED_FOR_PRODUCT;
                                                }
                                                <MudText>@DisplayProductFromId(context.Item.ProductId)</MudText>
                                            }
                                            @if (context.Item.CostType == CostType.FIXED_FOR_PRODUCT)
                                            {
                                            <MudText>[F] @DisplayProductFromId(context.Item.ProductId)</MudText>
                                            }
                                            @if (context.Item.CostType == CostType.FIXED_FOR_WORK)
                                            {
                                                <MudText>@L[$"Enum:CostType.{CostType.FIXED_FOR_WORK}"]</MudText>
                                            }
                                        </CellTemplate>
                                    </TemplateColumn>
                                    <PropertyColumn Property="x => x.Code" Title="@L["Code"]" Groupable="false"/>
                                    <PropertyColumn Property="x => x.Name" Title="@L["Name"]" Groupable="false"/>
                                    <PropertyColumn Property="x => x.Price" Title="@L["Price"]" Groupable="false" Format="C2"/>
                                    <PropertyColumn Property="x => x.WorkTime" Title="@L["WorkTime"]" Groupable="false"/>
                                    <TemplateColumn CellClass="d-table-cell justify-end" Groupable="false">
                                        <CellTemplate>
                                            <MudTooltip Inline="true" Text="@L["Modify"]" Arrow="true" Placement="MudBlazor.Placement.Top">
                                                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.EditNote" OnClick="() => OnClickEditProfessionaProfile(context.Item)"/>
                                            </MudTooltip>
                                            <MudTooltip Inline="true" Text="@L["Remove"]" Arrow="true" Placement="MudBlazor.Placement.Top">
                                                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Remove" OnClick="() => OnClickDeleteProfessionaProfile(context.Item)"/>
                                            </MudTooltip>
                                        </CellTemplate>
                                    </TemplateColumn>
                                </Columns>
                            </MudDataGrid>
                        } 
                    </MudTabPanel>
                </MudTabs>
            </MudPaper>
        </div>
    </MudDrawerContainer>
</MudPaper>
<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider />

@code
{
    private readonly CultureInfo cultureInfo = new CultureInfo("it-IT");
    private bool _open = true;

    private bool _openEnd = false;
    
    private void ToggleDrawer()
    {
        _open = !_open;
    }
    private void ToggleEndDrawer()
    {
        _openEnd = !_openEnd;
    }
}