

@page "/question-templates"

@attribute [Authorize(IBLTermocasaPermissions.QuestionTemplates.Default)]
@using IBLTermocasa.QuestionTemplates
@using IBLTermocasa.Localization
@using Microsoft.AspNetCore.Authorization
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout

@using IBLTermocasa.Permissions
@using Volo.Abp.AspNetCore.Components.Web
@using Volo.Abp.Http.Client
@using MudBlazor
@using Color = MudBlazor.Color
@using Size = MudBlazor.Size
@inherits IBLTermocasaComponentBase
@inject IQuestionTemplatesAppService QuestionTemplatesAppService

@inject IUiMessageService UiMessageService
@inject AbpBlazorMessageLocalizerHelper<IBLTermocasaResource> LH
@inject IRemoteServiceConfigurationProvider RemoteServiceConfigurationProvider
@inject NavigationManager NavigationManager
@using IBLTermocasa.Types


@* ************************* PAGE HEADER ************************* *@
<PageHeader Title="@L["QuestionTemplates"]" BreadcrumbItems="BreadcrumbItems" Toolbar="Toolbar">

</PageHeader>

@* ************************* SEARCH AND DATA GRID ************************* *@

<MudDataGrid @ref="QuestionTemplateMudDataGrid"
             ServerData="LoadGridData"
             T="QuestionTemplateDto"
             ReadOnly="false"
             Virtualize="true" FixedHeader="true"
             Hover="true"
             Bordered="false" Dense="false"
             Filterable="true" RowsPerPage="10"
             SortMode="SortMode.Multiple"
             Class="mud-data-grid-custom">
    <ToolBarContent>
        <MudTextField T="string" Placeholder="@L["Search"]" Adornment="Adornment.Start" Immediate="true" ValueChanged="arg => SearchAsync(arg)" DebounceInterval="1000"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-2">
        </MudTextField>
        <MudSpacer/>
        <MudButton Class="mr-2" StartIcon="@Icons.Material.Outlined.FileDownload" Size="Size.Small" Variant="Variant.Filled" Color="@Color.Primary" OnClick="DownloadAsExcelAsync">@L["ExportToExcel"]</MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Variant="Variant.Filled" Color="@Color.Primary" OnClick="OpenCreateQuestionTemplateModalAsync">@L["NewQuestionTemplate"]</MudButton>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Code" Title="@L["Code"]"/>
        <PropertyColumn Property="x => x.QuestionText" Title="@L["QuestionText"]"/>
        <TemplateColumn Title="@L["AnswerType"]">
            <CellTemplate Context="context">
                @L[$"Enum:AnswerType.{EnumExtensions.GetDisplayName(context.Item.AnswerType)}"]
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudTooltip Inline="true" Text="@L["Modify"]" Arrow="true" Placement="MudBlazor.Placement.Top" RootClass="d-table-cell">
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.RemoveRedEye" OnClick="@(() => OpenEditQuestionTemplateModalAsync(context.Item))"/>
                </MudTooltip>
                <MudTooltip Inline="true" Text="@L["Remove"]" Arrow="true" Placement="MudBlazor.Placement.Top" RootClass="d-table-cell">
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Remove" OnClick="() => DeleteQuestionTemplateAsync(context.Item)"/>
                </MudTooltip>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="QuestionTemplateDto"/>
    </PagerContent>
</MudDataGrid>
<MudThemeProvider/>
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>


@* ************************* CREATE MODAL ************************* *@
<Modal @ref="CreateQuestionTemplateModal" Closing="@CreateQuestionTemplateModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">

        <Form id="CreateQuestionTemplateForm">
            <ModalHeader>
                <ModalTitle>@L["NewQuestionTemplate"]</ModalTitle>
                <CloseButton Clicked="CloseCreateQuestionTemplateModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@NewQuestionTemplateValidations"
                            Mode="ValidationMode.Auto"
                            Model="@NewQuestionTemplate"
                            ValidateOnLoad="false">
                     
                    
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Code"] *</FieldLabel>
                            <TextEdit @bind-Text="@NewQuestionTemplate.Code"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["QuestionText"] *</FieldLabel>
                            <MemoEdit @bind-Text="@NewQuestionTemplate.QuestionText"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </MemoEdit>
                        </Field>
                    </Validation>


                    <Field>
                        <FieldLabel>@L["AnswerType"]</FieldLabel>
                        <Select TValue="AnswerType" @bind-SelectedValue="@NewQuestionTemplate.AnswerType" >
                            @foreach (var itemValue in Enum.GetValues(typeof(AnswerType)))
                            {
                                var enumValue = (AnswerType)itemValue;
                                <SelectItem TValue="AnswerType" Value="@enumValue">
                                    @L[$"Enum:AnswerType.{EnumExtensions.GetDisplayName(enumValue)}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["ChoiceValue"]</FieldLabel>
                            <TextEdit @bind-Text="@NewQuestionTemplate.ChoiceValue"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    
                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Blazorise.Color.Secondary"
                        Clicked="CloseCreateQuestionTemplateModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="CreateQuestionTemplateForm" Clicked="CreateQuestionTemplateAsync" />

            </ModalFooter>
        </Form>

    </ModalContent>
</Modal>

@* ************************* EDIT MODAL ************************* *@
<Modal @ref="EditQuestionTemplateModal" Closing="@EditQuestionTemplateModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">

        <Form id="EditQuestionTemplateForm">
            <ModalHeader>
                <ModalTitle>@L["Update"]</ModalTitle>
                <CloseButton Clicked="CloseEditQuestionTemplateModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditingQuestionTemplateValidations"
                            Mode="ValidationMode.Auto"
                            Model="@EditingQuestionTemplate"
                            ValidateOnLoad="false">
                     
                    
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Code"] *</FieldLabel>
                            <TextEdit @bind-Text="@EditingQuestionTemplate.Code"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["QuestionText"] *</FieldLabel>
                            <MemoEdit @bind-Text="@EditingQuestionTemplate.QuestionText"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </MemoEdit>
                        </Field>
                    </Validation>


                    <Field>
                        <FieldLabel>@L["AnswerType"]</FieldLabel>
                        <Select TValue="AnswerType" @bind-SelectedValue="@EditingQuestionTemplate.AnswerType" >
                            @foreach (var itemValue in Enum.GetValues(typeof(AnswerType)))
                            {
                                var enumValue = (AnswerType)itemValue;
                                <SelectItem TValue="AnswerType" Value="@enumValue">
                                    @L[$"Enum:AnswerType.{EnumExtensions.GetDisplayName(enumValue)}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["ChoiceValue"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingQuestionTemplate.ChoiceValue"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    
                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Blazorise.Color.Secondary"
                        Clicked="CloseEditQuestionTemplateModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="EditQuestionTemplateForm" Clicked="UpdateQuestionTemplateAsync" />

            </ModalFooter>
        </Form>

    </ModalContent>
</Modal>

