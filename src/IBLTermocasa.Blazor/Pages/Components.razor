

@page "/components"

@attribute [Authorize(IBLTermocasaPermissions.Components.Default)]
@using IBLTermocasa.Components
@using IBLTermocasa.Localization
@using IBLTermocasa.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Components.Web
@using Blazorise
@using Blazorise.Components
@using Blazorise.DataGrid
@using Volo.Abp.BlazoriseUI
@using Volo.Abp.BlazoriseUI.Components
@using Volo.Abp.ObjectMapping
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout

@using IBLTermocasa.Permissions
@using Volo.Abp.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components
@using ComponentItemDto = IBLTermocasa.Components.ComponentItemDto
@using Volo.Abp.Http.Client
@using Blazorise
@inherits IBLTermocasaComponentBase
@inject IComponentsAppService ComponentsAppService

@inject IUiMessageService UiMessageService
@inject AbpBlazorMessageLocalizerHelper<IBLTermocasaResource> LH
@inject IRemoteServiceConfigurationProvider RemoteServiceConfigurationProvider
@inject NavigationManager NavigationManager

@* ************************* PAGE HEADER ************************* *@
<PageHeader Title="@L["Components"]" BreadcrumbItems="BreadcrumbItems" Toolbar="Toolbar">

</PageHeader>
<CardDeck>
    <Card>
        <Row>
                @* ************************* SEARCH ************************* *@
                <Card>
                    <CardBody>
                        <Row>
                            <Form id="ComponentSearchForm" class="mb-3">
                                <Addons>
                                    <Addon AddonType="AddonType.Body">
                                        <TextEdit @bind-Text="@Filter.FilterText"
                                                  Autofocus="true"
                                                  Placeholder="@L["Search"]">
                                        </TextEdit>
                                    </Addon>
                                    <Addon AddonType="AddonType.End">
                                        <SubmitButton Form="ComponentSearchForm" Clicked="GetComponentsAsync">
                                            <Icon Name="IconName.Search" Class="me-1"></Icon>@L["Search"]
                                        </SubmitButton>
                                    </Addon>
                                </Addons>
                            </Form>
                        </Row>
                        <Row>
                            @* ************************* DATA GRID ************************* *@
                            <DataGrid
                                        @ref="@ComponentDtoDataGrid"
                                        TItem="ComponentDto"
                                      Data="ComponentList"
                                      RowClicked="@OnComponentDtoDataGridRowClickedAsync"
                                      ReadData="OnDataGridReadAsync"
                                      TotalItems="TotalCount"
                                      SelectionMode="DataGridSelectionMode.Single"
                                      ShowPager="true"
                                      Responsive="true"
                                      PageSize="PageSize"
                                      Class="datagrid-detail" bind-PageSize="5">
                                <DataGridColumns>
                                    <DataGridColumn TItem="ComponentDto"
                                                    Field="Name"
                                                    Caption="@L["Name"]">
                                    </DataGridColumn>
                                </DataGridColumns>
                                <RowOverlayTemplate>
                                    <Div id="@context.Item.Name" class="justify-content-start">
                                        <Button Color="Color.Primary" Size="Size.Default"
                                                Visibility="@((CanEditComponent) ? Visibility.Visible : Visibility.Invisible)"
                                                Clicked="() => OpenEditComponentModalAsync(context.Item)">
                                            <Icon Name="IconName.Edit" IconSize="IconSize.Default"/>
                                        </Button>
                                        <Button Color="Color.Secondary" Size="Size.Default"
                                                Visibility="@((CanDeleteComponent) ? Visibility.Visible : Visibility.Invisible)"
                                                Clicked="async () => await DeleteComponentAsync(context.Item)">
                                            <Icon Name="IconName.Delete" IconSize="IconSize.Default"/>
                                        </Button>
                                    </Div>
                                </RowOverlayTemplate>
                            </DataGrid>
                        </Row>
                    </CardBody>
                </Card>
        </Row>
    </Card>
    <Card>
        <Row>

            @* ************************* DATA GRID COMPONENT_ITEM************************* *@
            <Card>
                <CardBody>
                    @if (_selectedComponent == null)
                    {
                    <EmptyData/>
                    }
                    else
                    {
                    @if (CanCreateComponentItem)
                    {
                    <Row Class="mb-3">
                        <Column Class="d-flex justify-content-start">
                            <h5>@_selectedComponent.Name</h5>
                        </Column>
                        <Column Class="d-flex justify-content-end">
                            <Button Color="Color.Primary" Clicked="async () => await OpenCreateComponentItemModalAsync(_selectedComponent.Id)">
                                <i class="fas fa-plus me-1"></i>@L["NewComponentItem"]
                            </Button>
                        </Column>
                    </Row>
                    }

                    <DataGrid
                        @ref="ComponentItemDataGrid"
                        TItem="ComponentItemDto"
                        Data="SelectedComponentItems"
                        Sortable="false"
                        ShowCaptions="true"
                        ShowPager="true"
                        Responsive="true"
                        PageSize="ComponentItemPageSize">
                        <DataGridColumns>
                            <DataGridColumn TItem="ComponentItemDto"
                                            Field="IsDefault"
                                            Caption="@L["IsDefault"]">
                                <DisplayTemplate Context="component_item_context">
                                    @if (component_item_context.IsDefault)
                                    {
                                    <Icon TextColor="TextColor.Success" Name="@IconName.Check"/>
                                    }
                                    else
                                    {
                                    <Icon TextColor="TextColor.Danger" Name="@IconName.Times"/>
                                    }
                                </DisplayTemplate>
                            </DataGridColumn>
                            <DataGridColumn TItem="ComponentItemDto"
                                            Field="MaterialCode"
                                            Caption="@L["Material"]">
                            </DataGridColumn>
                            <DataGridColumn TItem="ComponentItemDto"
                                            Field="MaterialName"
                                            Caption="@L["Material"]">
                            </DataGridColumn>
                        </DataGridColumns>
                        <RowOverlayTemplate>
                            <Button Color="Color.Primary" Size="Size.ExtraLarge"
                                    Visibility="@((CanEditComponent) ? Visibility.Visible : Visibility.Invisible)"
                                    Clicked="() => OpenEditComponentItemModalAsync(context.Item)">
                                <Icon Name="IconName.Edit" IconSize="IconSize.ExtraSmall"/>
                            </Button>
                            <Button Color="Color.Secondary" Size="Size.ExtraSmall"
                                    Visibility="@((CanDeleteComponent) ? Visibility.Visible : Visibility.Invisible)"
                                    Clicked="async () => await DeleteComponentItemAsync(context.Item)">
                                <Icon Name="IconName.Delete" IconSize="IconSize.ExtraSmall"/>
                            </Button>
                        </RowOverlayTemplate>
                    </DataGrid>
                    }
                </CardBody>
            </Card>
        </Row>
    </Card>
</CardDeck>

@* ************************* CREATE MODAL ************************* *@
<Modal @ref="CreateComponentModal" Closing="@CreateComponentModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
        <Form id="CreateComponentForm">
            <ModalHeader>
                <ModalTitle>@L["NewComponent"]</ModalTitle>
                <CloseButton Clicked="CloseCreateComponentModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@NewComponentValidations"
                            Mode="ValidationMode.Auto"
                            Model="@NewComponent"
                            ValidateOnLoad="false">
                     
                    
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"] *</FieldLabel>
                            <TextEdit @bind-Text="@NewComponent.Name"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    
                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateComponentModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="CreateComponentForm" Clicked="CreateComponentAsync" />

            </ModalFooter>
        </Form>

    </ModalContent>
</Modal>

@* ************************* EDIT MODAL ************************* *@
<Modal @ref="EditComponentModal" Closing="@EditComponentModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">

        <Form id="EditComponentForm">
            <ModalHeader>
                <ModalTitle>@L["Update"]</ModalTitle>
                <CloseButton Clicked="CloseEditComponentModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditingComponentValidations"
                            Mode="ValidationMode.Auto"
                            Model="@EditingComponent"
                            ValidateOnLoad="false">
                     
                    
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"] *</FieldLabel>
                            <TextEdit @bind-Text="@EditingComponent.Name"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    
                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditComponentModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="EditComponentForm" Clicked="UpdateComponentAsync" />

            </ModalFooter>
        </Form>

    </ModalContent>
</Modal>

@* ************************* ComponentItem: CREATE MODAL ************************* *@
<Modal @ref="CreateComponentItemModal" Closing="@CreateComponentItemModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
        <Form id="CreateComponentItemForm">
            <ModalHeader>
                <ModalTitle>@L["NewComponentItem"]</ModalTitle>
                <CloseButton Clicked="CloseCreateComponentItemModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@NewComponentItemValidations"
                             Mode="ValidationMode.Auto"
                             Model="@NewComponentItem"
                             ValidateOnLoad="false">
                     
                    
                    <Field>
                        <Check TValue="bool" @bind-Checked="@NewComponentItem.IsDefault" >@L["IsDefault"]</Check>
                    </Field>

                    <Field>
                        <FieldLabel>@L["Material"]</FieldLabel>
                        <Select TValue="Guid" @bind-SelectedValue="@NewComponentItem.MaterialId">
                            @foreach (var material in MaterialsCollection)
                            {
                                <SelectItem TValue="Guid" Value="@(material.Id)">
                                    @(material.DisplayName)
                                </SelectItem>
                            }
                        </Select>
                    </Field>


                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateComponentItemModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="CreateComponentItemForm" Clicked="CreateComponentItemAsync" />
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@* ************************* ComponentItem: EDIT MODAL ************************* *@
<Modal @ref="EditComponentItemModal" Closing="@EditComponentItemModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
        <Form id="EditComponentItemForm">
            <ModalHeader>
                <ModalTitle>@L["Update"]</ModalTitle>
                <CloseButton Clicked="CloseEditComponentItemModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditingComponentItemValidations"
                             Mode="ValidationMode.Auto"
                             Model="@EditingComponentItem"
                             ValidateOnLoad="false">
                     
                    
                    <Field>
                        <Check TValue="bool" @bind-Checked="@EditingComponentItem.IsDefault" >@L["IsDefault"]</Check>
                    </Field>

                    <Field>
                        <FieldLabel>@L["Material"]</FieldLabel>
                        <Select TValue="Guid" @bind-SelectedValue="@EditingComponentItem.MaterialId">
                            @foreach (var material in MaterialsCollection)
                            {
                                <SelectItem TValue="Guid" Value="@(material.Id)">
                                    @(material.DisplayName)
                                </SelectItem>
                            }
                        </Select>
                    </Field>


                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditComponentItemModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="EditComponentItemForm" Clicked="UpdateComponentItemAsync" />
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>