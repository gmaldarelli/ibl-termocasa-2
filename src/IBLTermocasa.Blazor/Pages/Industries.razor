

@page "/industries"

@attribute [Authorize(IBLTermocasaPermissions.Industries.Default)]
@using IBLTermocasa.Industries
@using IBLTermocasa.Localization
@using IBLTermocasa.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Components.Web
@using Blazorise
@using Blazorise.Components
@using Blazorise.DataGrid
@using Volo.Abp.BlazoriseUI
@using Volo.Abp.BlazoriseUI.Components
@using Volo.Abp.ObjectMapping
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout

@using IBLTermocasa.Permissions
@using Volo.Abp.AspNetCore.Components.Web


@inherits IBLTermocasaComponentBase
@inject IIndustriesAppService IndustriesAppService

@inject IUiMessageService UiMessageService
@inject AbpBlazorMessageLocalizerHelper<IBLTermocasaResource> LH



@* ************************* PAGE HEADER ************************* *@
<PageHeader Title="@L["Industries"]" BreadcrumbItems="BreadcrumbItems" Toolbar="Toolbar">

</PageHeader>

@* ************************* SEARCH ************************* *@
<Card>
    <CardBody>

        <Form id="IndustrySearchForm" class="mb-3">
            <Addons>
                <Addon AddonType="AddonType.Body">
                    <TextEdit @bind-Text="@Filter.FilterText"
                              Autofocus="true"
                              Placeholder="@L["Search"]">
                    </TextEdit>
                </Addon>
                <Addon AddonType="AddonType.End">
                    <SubmitButton Form="IndustrySearchForm" Clicked="GetIndustriesAsync">
                        <Icon Name="IconName.Search" Class="me-1"></Icon>@L["Search"]
                    </SubmitButton>
                </Addon>
            </Addons>
        </Form>
        
        <Row Class="mt-3 mb-3"> 
            <div class="col-md-12">
                <a href="javascript:;" class="text-decoration-none" @onclick="() => ShowAdvancedFilters = !ShowAdvancedFilters">@L["SeeAdvancedFilters"]</a>
            </div>
        </Row>
        
        <div style="display: @(!ShowAdvancedFilters ? "none" : "block")">
            <Row>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Code"]</FieldLabel>
                        <TextEdit Text="@Filter.Code" TextChanged="@OnCodeChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Description"]</FieldLabel>
                        <TextEdit Text="@Filter.Description" TextChanged="@OnDescriptionChangedAsync" />                       
                    </Field>
                </Column>
            </Row>

        </div>


    </CardBody>
</Card>

@* ************************* DATA GRID ************************* *@
<Card>
    <CardBody>        
        @if (SelectedIndustries.Any())
        {
            <div class="d-flex justify-content-between align-items-center mb-2">
                @if (AllIndustriesSelected)
                {
                    <p class="lead mb-0">
                        @L["AllItemsAreSelected", TotalCount]
                    </p>
                }
                else
                {
                    <p class="lead mb-0">
                        @if (SelectedIndustries.Count > 1)
                        {
                            @L["NumberOfItemsOnThisPageAreSelected", SelectedIndustries.Count]
                        }
                        else
                        {
                            @L["OneItemOnThisPageIsSelected"]
                        }
                    </p>
                }
                    
                <div>
                    @if ((SelectedIndustries.Count == PageSize || SelectedIndustries.Count == IndustryList.Count) && TotalCount > SelectedIndustries.Count)
                    {
                        if (!AllIndustriesSelected)
                        {
                            <Button Clicked="SelectAllItems" Class="mx-1 btn-outline-secondary">@L["SelectAllItems", TotalCount]</Button>
                        }
                        else
                        {
                            <Button Clicked="ClearSelection" Class="mx-1 btn-outline-secondary">@L["ClearSelection"]</Button>
                        }
                    }
                    
                    <Button Color="Color.Danger" Class="mx-1" Size="Size.Medium" Clicked="DeleteSelectedIndustriesAsync">
                        <Icon Name="@IconName.Delete" /> @L["Delete"]
                    </Button>
                </div>
            </div>
            
            <hr class="my-1 mx-0"/>
        }
        <DataGrid TItem="IndustryDto"
                  Data="IndustryList"
                  
                  SelectionMode="DataGridSelectionMode.Multiple"
                  SelectedRows="SelectedIndustries"
                  RowSelectable="@((args) => CanDeleteIndustry)"
                  SelectedRowsChanged="SelectedIndustryRowsChanged"
                  
                  
                  
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  Responsive="true"
                  PageSize="PageSize"
                  Class="datagrid-detail">
            <DataGridColumns>
                
                @if (CanDeleteIndustry)
                {
                    <DataGridMultiSelectColumn TItem="IndustryDto" Width="30px" Displayable="@(IndustryList.Any())"></DataGridMultiSelectColumn>
                }
                
                <DataGridEntityActionsColumn TItem="IndustryDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="IndustryDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="IndustryDto"
                                          Visible="@CanEditIndustry"
                                          Clicked="async () => await OpenEditIndustryModalAsync(context)"
                                          Text="@L["Edit"]"></EntityAction>
                            <EntityAction TItem="IndustryDto"
                                          Visible="@CanDeleteIndustry"
                                          Clicked="() => DeleteIndustryAsync(context)"
                                          ConfirmationMessage="@(()=> L["DeleteConfirmationMessage"])"
                                          Text="@L["Delete"]"></EntityAction>

                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
               
              <DataGridColumn TItem="IndustryDto"
                      Field="Code"
                      Caption="@L["Code"]">
              </DataGridColumn>

              <DataGridColumn TItem="IndustryDto"
                      Field="Description"
                      Caption="@L["Description"]">
              </DataGridColumn>

            </DataGridColumns>
            
            
        </DataGrid>
    </CardBody>
</Card>

@* ************************* CREATE MODAL ************************* *@
<Modal @ref="CreateIndustryModal" Closing="@CreateIndustryModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">

        <Form id="CreateIndustryForm">
            <ModalHeader>
                <ModalTitle>@L["NewIndustry"]</ModalTitle>
                <CloseButton Clicked="CloseCreateIndustryModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@NewIndustryValidations"
                            Mode="ValidationMode.Auto"
                            Model="@NewIndustry"
                            ValidateOnLoad="false">
                     
                    
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Code"] *</FieldLabel>
                            <TextEdit @bind-Text="@NewIndustry.Code" MaxLength="IndustryConsts.CodeMaxLength" >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Description"]</FieldLabel>
                            <MemoEdit @bind-Text="@NewIndustry.Description" MaxLength="IndustryConsts.DescriptionMaxLength" >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </MemoEdit>
                        </Field>
                    </Validation>


                    
                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateIndustryModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="CreateIndustryForm" Clicked="CreateIndustryAsync" />

            </ModalFooter>
        </Form>

    </ModalContent>
</Modal>

@* ************************* EDIT MODAL ************************* *@
<Modal @ref="EditIndustryModal" Closing="@EditIndustryModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">

        <Form id="EditIndustryForm">
            <ModalHeader>
                <ModalTitle>@L["Update"]</ModalTitle>
                <CloseButton Clicked="CloseEditIndustryModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditingIndustryValidations"
                            Mode="ValidationMode.Auto"
                            Model="@EditingIndustry"
                            ValidateOnLoad="false">
                     
                    
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Code"] *</FieldLabel>
                            <TextEdit @bind-Text="@EditingIndustry.Code" MaxLength="IndustryConsts.CodeMaxLength" >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Description"]</FieldLabel>
                            <MemoEdit @bind-Text="@EditingIndustry.Description" MaxLength="IndustryConsts.DescriptionMaxLength" >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </MemoEdit>
                        </Field>
                    </Validation>


                    
                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditIndustryModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="EditIndustryForm" Clicked="UpdateIndustryAsync" />

            </ModalFooter>
        </Form>

    </ModalContent>
</Modal>

