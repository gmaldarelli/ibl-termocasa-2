

@page "/materials"

@attribute [Authorize(IBLTermocasaPermissions.Materials.Default)]
@using IBLTermocasa.Materials
@using IBLTermocasa.Localization
@using IBLTermocasa.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Components.Web
@using Blazorise
@using Blazorise.Components
@using Blazorise.DataGrid
@using Volo.Abp.BlazoriseUI
@using Volo.Abp.BlazoriseUI.Components
@using Volo.Abp.ObjectMapping
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout

@using IBLTermocasa.Permissions
@using Volo.Abp.AspNetCore.Components.Web
@using Volo.Abp.Http.Client
@using IBLTermocasa.Types
@using MudBlazor
@using Size = MudBlazor.Size
@using Color = MudBlazor.Color
@inherits IBLTermocasaComponentBase
@inject IMaterialsAppService MaterialsAppService

@inject IUiMessageService UiMessageService
@inject AbpBlazorMessageLocalizerHelper<IBLTermocasaResource> LH
@inject IRemoteServiceConfigurationProvider RemoteServiceConfigurationProvider
@inject NavigationManager NavigationManager


@* ************************* PAGE HEADER ************************* *@
<PageHeader Title="@L["Materials"]" BreadcrumbItems="BreadcrumbItems" Toolbar="Toolbar">

</PageHeader>


@* ************************* SEARCH AND DATA GRID ************************* *@

<MudDataGrid @ref="MaterialMudDataGrid"
             ServerData="LoadGridData"
             T="MaterialDto"
             ReadOnly="false"
             Virtualize="true" FixedHeader="true"
             Hover="true"
             Bordered="false" Dense="false"
             Filterable="true" RowsPerPage="10"
             SortMode="SortMode.Multiple"
             Class="mud-data-grid-custom">
    <ToolBarContent>
        <MudTextField T="string" Placeholder="@L["Search"]" Adornment="Adornment.Start" Immediate="true" ValueChanged="arg => SearchAsync(arg)" DebounceInterval="1000"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-2">
        </MudTextField>
        <MudSpacer/>
        <MudButton Class="mr-2" StartIcon="@Icons.Material.Outlined.FileDownload" Size="Size.Small" Variant="Variant.Filled" Color="@Color.Primary" OnClick="DownloadAsExcelAsync">@L["ExportToExcel"]</MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Variant="Variant.Filled" Color="@Color.Primary" OnClick="OpenCreateMaterialModalAsync">@L["NewMaterial"]</MudButton>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Code" Title="@L["Code"]"/>
        <PropertyColumn Property="x => x.Name" Title="@L["Name"]"/>
        <PropertyColumn Property="x => x.MeasureUnit" Title="@L["MeasureUnitShort"]"/>
        <PropertyColumn Property="x => x.Quantity" Title="@L["Quantity"]"/>
        <PropertyColumn Property="x => x.Lifo" Title="@L["Lifo"]"/>
        <PropertyColumn Property="x => x.StandardPrice" Title="@L["StandardPrice"]"/>
        <PropertyColumn Property="x => x.AveragePrice" Title="@L["AveragePrice"]"/>
        <PropertyColumn Property="x => x.LastPrice" Title="@L["LastPrice"]"/>
        <TemplateColumn Title="@L["SourceType"]">
            <CellTemplate Context="context">
                @L[$"Enum:SourceType.{EnumExtensions.GetDisplayName(context.Item.SourceType)}"]
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.FirstSync" Title="@L["FirstSync"]"/>
        <PropertyColumn Property="x => x.LastSync" Title="@L["LastSync"]"/>
        <TemplateColumn StickyRight="true">
            <CellTemplate>
                <MudTooltip Inline="true" Text="@L["Modify"]" Arrow="true" Placement="MudBlazor.Placement.Top">
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.RemoveRedEye" OnClick="@(() => OpenEditMaterialModalAsync(context.Item))"/>
                </MudTooltip>
                <MudTooltip Inline="true" Text="@L["Remove"]" Arrow="true" Placement="MudBlazor.Placement.Top">
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Remove" OnClick="() => DeleteMaterialAsync(context.Item)"/>
                </MudTooltip>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="MaterialDto"/>
    </PagerContent>
</MudDataGrid>
<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>


@* ************************* CREATE MODAL ************************* *@
<Modal @ref="CreateMaterialModal" Closing="@CreateMaterialModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">

        <Form id="CreateMaterialForm">
            <ModalHeader>
                <ModalTitle>@L["NewMaterial"]</ModalTitle>
                <CloseButton Clicked="CloseCreateMaterialModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@NewMaterialValidations"
                            Mode="ValidationMode.Auto"
                            Model="@NewMaterial"
                            ValidateOnLoad="false">
                     
                    
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Code"] *</FieldLabel>
                            <TextEdit @bind-Text="@NewMaterial.Code"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"] *</FieldLabel>
                            <TextEdit @bind-Text="@NewMaterial.Name"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Field>
                        <FieldLabel>@L["MeasureUnit"]</FieldLabel>
                        <Select TValue="MeasureUnit" @bind-SelectedValue="@NewMaterial.MeasureUnit">
                            @foreach (var itemValue in Enum.GetValues(typeof(MeasureUnit)))
                            {
                            var enumValue = (MeasureUnit)itemValue;
                            <SelectItem TValue="MeasureUnit" Value="@enumValue">
                                @L[$"Enum:MeasureUnit.{EnumExtensions.GetDisplayName(enumValue)}"]
                            </SelectItem>
                            }
                        </Select>
                    </Field>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Quantity"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@NewMaterial.Quantity"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Lifo"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@NewMaterial.Lifo"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["StandardPrice"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@NewMaterial.StandardPrice"    >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["AveragePrice"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@NewMaterial.AveragePrice"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["LastPrice"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@NewMaterial.LastPrice"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["AveragePriceSecond"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@NewMaterial.AveragePriceSecond"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    
                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Blazorise.Color.Secondary"
                        Clicked="CloseCreateMaterialModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="CreateMaterialForm" Clicked="CreateMaterialAsync" />

            </ModalFooter>
        </Form>

    </ModalContent>
</Modal>

@* ************************* EDIT MODAL ************************* *@
<Modal @ref="EditMaterialModal" Closing="@EditMaterialModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">

        <Form id="EditMaterialForm">
            <ModalHeader>
                <ModalTitle>@L["Update"]</ModalTitle>
                <CloseButton Clicked="CloseEditMaterialModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditingMaterialValidations"
                            Mode="ValidationMode.Auto"
                            Model="@EditingMaterial"
                            ValidateOnLoad="false">
                     
                    
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Code"] *</FieldLabel>
                            <TextEdit @bind-Text="@EditingMaterial.Code"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"] *</FieldLabel>
                            <TextEdit @bind-Text="@EditingMaterial.Name"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>

                    
                    <Field>
                        <FieldLabel>@L["MeasureUnit"]</FieldLabel>
                        <Select TValue="MeasureUnit" @bind-SelectedValue="@EditingMaterial.MeasureUnit">
                            @foreach (var itemValue in Enum.GetValues(typeof(MeasureUnit)))
                            {
                            var enumValue = (MeasureUnit)itemValue;
                            <SelectItem TValue="MeasureUnit" Value="@enumValue">
                                @L[$"Enum:MeasureUnit.{EnumExtensions.GetDisplayName(enumValue)}"]
                            </SelectItem>
                            }
                        </Select>
                    </Field>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Quantity"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@EditingMaterial.Quantity"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Lifo"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@EditingMaterial.Lifo"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["StandardPrice"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@EditingMaterial.StandardPrice"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["AveragePrice"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@EditingMaterial.AveragePrice"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["LastPrice"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@EditingMaterial.LastPrice"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["AveragePriceSecond"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@EditingMaterial.AveragePriceSecond"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Field>
                        <FieldLabel>@L["SourceType"]</FieldLabel>
                        <Select TValue="SourceType" @bind-SelectedValue="@EditingMaterial.SourceType" ReadOnly>
                            @foreach (var itemValue in Enum.GetValues(typeof(SourceType)))
                            {
                                var enumValue = (SourceType)itemValue;
                                <SelectItem TValue="SourceType" Value="@enumValue">
                                    @L[$"Enum:SourceType.{EnumExtensions.GetDisplayName(enumValue)}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["FirstSync"]</FieldLabel>
                            <DateEdit TValue="DateTime?" InputMode="DateInputMode.DateTime" @bind-Date="@EditingMaterial.FirstSync" ReadOnly>
                               <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </DateEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["LastSync"]</FieldLabel>
                            <DateEdit TValue="DateTime?" InputMode="DateInputMode.DateTime" @bind-Date="@EditingMaterial.LastSync" ReadOnly>
                               <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </DateEdit>
                        </Field>
                    </Validation>


                    
                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Blazorise.Color.Secondary"
                        Clicked="CloseEditMaterialModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="EditMaterialForm" Clicked="UpdateMaterialAsync" />

            </ModalFooter>
        </Form>

    </ModalContent>
</Modal>

