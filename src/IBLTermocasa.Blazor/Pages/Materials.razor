

@page "/materials"

@attribute [Authorize(IBLTermocasaPermissions.Materials.Default)]
@using IBLTermocasa.Materials
@using IBLTermocasa.Localization
@using IBLTermocasa.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Components.Web
@using Blazorise
@using Blazorise.Components
@using Blazorise.DataGrid
@using Volo.Abp.BlazoriseUI
@using Volo.Abp.BlazoriseUI.Components
@using Volo.Abp.ObjectMapping
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout

@using IBLTermocasa.Permissions
@using Volo.Abp.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components
@using Volo.Abp.Http.Client
@inherits IBLTermocasaComponentBase
@inject IMaterialsAppService MaterialsAppService

@inject IUiMessageService UiMessageService
@inject AbpBlazorMessageLocalizerHelper<IBLTermocasaResource> LH
@inject IRemoteServiceConfigurationProvider RemoteServiceConfigurationProvider
@inject NavigationManager NavigationManager
@using IBLTermocasa.Types


@* ************************* PAGE HEADER ************************* *@
<PageHeader Title="@L["Materials"]" BreadcrumbItems="BreadcrumbItems" Toolbar="Toolbar">

</PageHeader>

@* ************************* SEARCH ************************* *@
<Card>
    <CardBody>
@*//<suite-custom-code-block-1>*@
@*//</suite-custom-code-block-1>*@
        <Form id="MaterialSearchForm" class="mb-3">
            <Addons>
                <Addon AddonType="AddonType.Body">
                    <TextEdit @bind-Text="@Filter.FilterText"
                              Autofocus="true"
                              Placeholder="@L["Search"]">
                    </TextEdit>
                </Addon>
                <Addon AddonType="AddonType.End">
                    <SubmitButton Form="MaterialSearchForm" Clicked="GetMaterialsAsync">
                        <Icon Name="IconName.Search" Class="me-1"></Icon>@L["Search"]
                    </SubmitButton>
                </Addon>
            </Addons>
        </Form>
        
        <Row Class="mt-3 mb-3"> 
            <div class="col-md-12">
                <a href="javascript:;" class="text-decoration-none" @onclick="() => ShowAdvancedFilters = !ShowAdvancedFilters">@L["SeeAdvancedFilters"]</a>
            </div>
        </Row>
        
        <div style="display: @(!ShowAdvancedFilters ? "none" : "block")">
            <Row>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Code"]</FieldLabel>
                        <TextEdit Text="@Filter.Code" TextChanged="@OnCodeChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Name"]</FieldLabel>
                        <TextEdit Text="@Filter.Name" TextChanged="@OnNameChangedAsync" />                       
                    </Field>
                </Column>
            </Row>
@*//<suite-custom-code-block-2>*@
@*//</suite-custom-code-block-2>*@
        </div>

@*//<suite-custom-code-block-3>*@
@*//</suite-custom-code-block-3>*@
    </CardBody>
</Card>

@* ************************* DATA GRID ************************* *@
<Card>
    <CardBody>        
        @if (SelectedMaterials.Any())
        {
            <div class="d-flex justify-content-between align-items-center mb-2">
                @if (AllMaterialsSelected)
                {
                    <p class="lead mb-0">
                        @L["AllItemsAreSelected", TotalCount]
                    </p>
                }
                else
                {
                    <p class="lead mb-0">
                        @if (SelectedMaterials.Count > 1)
                        {
                            @L["NumberOfItemsOnThisPageAreSelected", SelectedMaterials.Count]
                        }
                        else
                        {
                            @L["OneItemOnThisPageIsSelected"]
                        }
                    </p>
                }
                    
                <div>
                    @if ((SelectedMaterials.Count == PageSize || SelectedMaterials.Count == MaterialList.Count) && TotalCount > SelectedMaterials.Count)
                    {
                        if (!AllMaterialsSelected)
                        {
                            <Button Clicked="SelectAllItems" Class="mx-1 btn-outline-secondary">@L["SelectAllItems", TotalCount]</Button>
                        }
                        else
                        {
                            <Button Clicked="ClearSelection" Class="mx-1 btn-outline-secondary">@L["ClearSelection"]</Button>
                        }
                    }
                    
                    <Button Color="Color.Danger" Class="mx-1" Size="Size.Medium" Clicked="DeleteSelectedMaterialsAsync">
                        <Icon Name="@IconName.Delete" /> @L["Delete"]
                    </Button>
                </div>
            </div>
            
            <hr class="my-1 mx-0"/>
        }
        <DataGrid TItem="MaterialDto"
                  Data="MaterialList"
                  
                  SelectionMode="DataGridSelectionMode.Multiple"
                  SelectedRows="SelectedMaterials"
                  RowSelectable="@((args) => CanDeleteMaterial)"
                  SelectedRowsChanged="SelectedMaterialRowsChanged"
                  
                  
                  
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  Responsive="true"
                  PageSize="PageSize"
                  Class="datagrid-detail">
            <DataGridColumns>
                
                @if (CanDeleteMaterial)
                {
                    <DataGridMultiSelectColumn TItem="MaterialDto" Width="30px" Displayable="@(MaterialList.Any())"></DataGridMultiSelectColumn>
                }
                
                <DataGridEntityActionsColumn TItem="MaterialDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="MaterialDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="MaterialDto"
                                          Visible="@CanEditMaterial"
                                          Clicked="async () => await OpenEditMaterialModalAsync(context)"
                                          Text="@L["Edit"]"></EntityAction>
                            <EntityAction TItem="MaterialDto"
                                          Visible="@CanDeleteMaterial"
                                          Clicked="() => DeleteMaterialAsync(context)"
                                          ConfirmationMessage="@(()=> L["DeleteConfirmationMessage"])"
                                          Text="@L["Delete"]"></EntityAction>
@*//<suite-custom-code-block-4>*@
@*//</suite-custom-code-block-4>*@
                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
               
              <DataGridColumn TItem="MaterialDto"
                      Field="Code"
                      Caption="@L["Code"]">
              </DataGridColumn>

              <DataGridColumn TItem="MaterialDto"
                      Field="Name"
                      Caption="@L["Name"]">
              </DataGridColumn>

              <DataGridColumn TItem="MaterialDto"
                      Field="MeasureUnit"
                      Caption="@L["MeasureUnit"]">
                    <DisplayTemplate>
                        @L[$"Enum:MeasureUnit.{(int)context.MeasureUnit}"]
                    </DisplayTemplate>
              </DataGridColumn>


              <DataGridColumn TItem="MaterialDto"
                      Field="Quantity"
                      Caption="@L["Quantity"]">
              </DataGridColumn>

              <DataGridColumn TItem="MaterialDto"
                      Field="Lifo"
                      Caption="@L["Lifo"]">
              </DataGridColumn>

              <DataGridColumn TItem="MaterialDto"
                      Field="StandardPrice"
                      Caption="@L["StandardPrice"]">
              </DataGridColumn>

              <DataGridColumn TItem="MaterialDto"
                      Field="AveragePrice"
                      Caption="@L["AveragePrice"]">
              </DataGridColumn>

              <DataGridColumn TItem="MaterialDto"
                      Field="LastPrice"
                      Caption="@L["LastPrice"]">
              </DataGridColumn>

            </DataGridColumns>
            
            
        </DataGrid>
    </CardBody>
</Card>

@* ************************* CREATE MODAL ************************* *@
<Modal @ref="CreateMaterialModal" Closing="@CreateMaterialModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
@*//<suite-custom-code-block-5>*@
@*//</suite-custom-code-block-5>*@
        <Form id="CreateMaterialForm">
            <ModalHeader>
                <ModalTitle>@L["NewMaterial"]</ModalTitle>
                <CloseButton Clicked="CloseCreateMaterialModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@NewMaterialValidations"
                            Mode="ValidationMode.Auto"
                            Model="@NewMaterial"
                            ValidateOnLoad="false">
                     
                    
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Code"] *</FieldLabel>
                            <TextEdit @bind-Text="@NewMaterial.Code"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"] *</FieldLabel>
                            <TextEdit @bind-Text="@NewMaterial.Name"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Field>
                        <FieldLabel>@L["MeasureUnit"]</FieldLabel>
                        <Select TValue="MeasureUnit" @bind-SelectedValue="@NewMaterial.MeasureUnit" >
                            @foreach (var itemValue in Enum.GetValues(typeof(MeasureUnit)))
                            {
                                <SelectItem TValue="MeasureUnit" Value="@((MeasureUnit) itemValue)">
                                    @L[$"Enum:MeasureUnit.{((MeasureUnit) itemValue).ToString("d")}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Quantity"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@NewMaterial.Quantity"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Lifo"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@NewMaterial.Lifo"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["StandardPrice"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@NewMaterial.StandardPrice"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["AveragePrice"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@NewMaterial.AveragePrice"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["LastPrice"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@NewMaterial.LastPrice"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["AveragePriceSecond"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@NewMaterial.AveragePriceSecond"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    
                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateMaterialModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="CreateMaterialForm" Clicked="CreateMaterialAsync" />
@*//<suite-custom-code-block-6>*@
@*//</suite-custom-code-block-6>*@
            </ModalFooter>
        </Form>
@*//<suite-custom-code-block-7>*@
@*//</suite-custom-code-block-7>*@
    </ModalContent>
</Modal>

@* ************************* EDIT MODAL ************************* *@
<Modal @ref="EditMaterialModal" Closing="@EditMaterialModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
@*//<suite-custom-code-block-8>*@
@*//</suite-custom-code-block-8>*@
        <Form id="EditMaterialForm">
            <ModalHeader>
                <ModalTitle>@L["Update"]</ModalTitle>
                <CloseButton Clicked="CloseEditMaterialModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditingMaterialValidations"
                            Mode="ValidationMode.Auto"
                            Model="@EditingMaterial"
                            ValidateOnLoad="false">
                     
                    
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Code"] *</FieldLabel>
                            <TextEdit @bind-Text="@EditingMaterial.Code"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"] *</FieldLabel>
                            <TextEdit @bind-Text="@EditingMaterial.Name"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Field>
                        <FieldLabel>@L["MeasureUnit"]</FieldLabel>
                        <Select TValue="MeasureUnit" @bind-SelectedValue="@EditingMaterial.MeasureUnit" >
                            @foreach (var itemValue in Enum.GetValues(typeof(MeasureUnit)))
                            {
                                <SelectItem TValue="MeasureUnit" Value="@((MeasureUnit) itemValue)">
                                    @L[$"Enum:MeasureUnit.{((MeasureUnit) itemValue).ToString("d")}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Quantity"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@EditingMaterial.Quantity"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Lifo"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@EditingMaterial.Lifo"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["StandardPrice"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@EditingMaterial.StandardPrice"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["AveragePrice"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@EditingMaterial.AveragePrice"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["LastPrice"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@EditingMaterial.LastPrice"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["AveragePriceSecond"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@EditingMaterial.AveragePriceSecond"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    
                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditMaterialModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="EditMaterialForm" Clicked="UpdateMaterialAsync" />
@*//<suite-custom-code-block-9>*@
@*//</suite-custom-code-block-9>*@
            </ModalFooter>
        </Form>
@*//<suite-custom-code-block-10>*@
@*//</suite-custom-code-block-10>*@
    </ModalContent>
</Modal>

