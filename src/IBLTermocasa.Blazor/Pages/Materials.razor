

@page "/materials"

@attribute [Authorize(IBLTermocasaPermissions.Materials.Default)]
@using IBLTermocasa.Materials
@using IBLTermocasa.Localization
@using IBLTermocasa.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Components.Web
@using Blazorise
@using Blazorise.Components
@using Blazorise.DataGrid
@using Volo.Abp.BlazoriseUI
@using Volo.Abp.BlazoriseUI.Components
@using Volo.Abp.ObjectMapping
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout

@using IBLTermocasa.Permissions
@using Volo.Abp.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components
@using Volo.Abp.Http.Client
@inherits IBLTermocasaComponentBase
@inject IMaterialsAppService MaterialsAppService

@inject IUiMessageService UiMessageService
@inject AbpBlazorMessageLocalizerHelper<IBLTermocasaResource> LH
@inject IRemoteServiceConfigurationProvider RemoteServiceConfigurationProvider
@inject NavigationManager NavigationManager
@using IBLTermocasa.Types

@using IBLTermocasa.Types


@* ************************* PAGE HEADER ************************* *@
<PageHeader Title="@L["Materials"]" BreadcrumbItems="BreadcrumbItems" Toolbar="Toolbar">

</PageHeader>

@* ************************* SEARCH ************************* *@
<Card>
    <CardBody>

        <Form id="MaterialSearchForm" class="mb-3">
            <Addons>
                <Addon AddonType="AddonType.Body">
                    <TextEdit @bind-Text="@Filter.FilterText"
                              Autofocus="true"
                              Placeholder="@L["Search"]">
                    </TextEdit>
                </Addon>
                <Addon AddonType="AddonType.End">
                    <SubmitButton Form="MaterialSearchForm" Clicked="GetMaterialsAsync">
                        <Icon Name="IconName.Search" Class="me-1"></Icon>@L["Search"]
                    </SubmitButton>
                </Addon>
            </Addons>
        </Form>
        
        <Row Class="mt-3 mb-3"> 
            <div class="col-md-12">
                <a href="javascript:;" class="text-decoration-none" @onclick="() => ShowAdvancedFilters = !ShowAdvancedFilters">@L["SeeAdvancedFilters"]</a>
            </div>
        </Row>
        
        <div style="display: @(!ShowAdvancedFilters ? "none" : "block")">
            <Row>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Code"]</FieldLabel>
                        <TextEdit Text="@Filter.Code" TextChanged="@OnCodeChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Name"]</FieldLabel>
                        <TextEdit Text="@Filter.Name" TextChanged="@OnNameChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["SourceType"]</FieldLabel>
                        <Select TValue="SourceType?"
		SelectedValue="@Filter.SourceType"
		SelectedValueChanged="@OnSourceTypeChangedAsync">

<SelectItem></SelectItem>

@foreach(SourceType value in Enum.GetValues(typeof(SourceType)))
{
	<SelectItem Value="value">
		@value
	</SelectItem>
}

</Select>                       
                    </Field>
                </Column>
            </Row>

        </div>


    </CardBody>
</Card>

@* ************************* DATA GRID ************************* *@
<Card>
    <CardBody>
        <DataGrid TItem="MaterialDto"
                  Data="MaterialList"
                  
                  
                  
                  
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  Responsive="true"
                  PageSize="PageSize"
                  Class="datagrid-detail">
            <DataGridColumns>
                
                
                <DataGridEntityActionsColumn TItem="MaterialDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="MaterialDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="MaterialDto"
                                          Visible="@CanEditMaterial"
                                          Clicked="async () => await OpenEditMaterialModalAsync(context)"
                                          Text="@L["Edit"]"></EntityAction>
                            <EntityAction TItem="MaterialDto"
                                          Visible="@CanDeleteMaterial"
                                          Clicked="() => DeleteMaterialAsync(context)"
                                          ConfirmationMessage="@(()=> L["DeleteConfirmationMessage"])"
                                          Text="@L["Delete"]"></EntityAction>

                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
               
              <DataGridColumn TItem="MaterialDto"
                      Field="Code"
                      Caption="@L["Code"]">
              </DataGridColumn>

              <DataGridColumn TItem="MaterialDto"
                      Field="Name"
                      Caption="@L["Name"]">
              </DataGridColumn>

              <DataGridColumn TItem="MaterialDto"
                      Field="MeasureUnit"
                      Caption="@L["MeasureUnitShort"]">
                    <DisplayTemplate>
                        @L[$"Enum:MeasureUnit.{EnumExtensions.GetDisplayName(context.MeasureUnit)}"]
                    </DisplayTemplate>
              </DataGridColumn>


              <DataGridColumn TItem="MaterialDto"
                      Field="Quantity"
                      Caption="@L["Quantity"]">
              </DataGridColumn>

              <DataGridColumn TItem="MaterialDto"
                      Field="Lifo"
                      Caption="@L["Lifo"]">
              </DataGridColumn>

              <DataGridColumn TItem="MaterialDto"
                      Field="StandardPrice"
                      Caption="@L["StandardPrice"]" DisplayFormat="{0:C}">
              </DataGridColumn>

              <DataGridColumn TItem="MaterialDto"
                      Field="AveragePrice"
                      Caption="@L["AveragePrice"]">
              </DataGridColumn>

              <DataGridColumn TItem="MaterialDto"
                      Field="LastPrice"
                      Caption="@L["LastPrice"]">
              </DataGridColumn>

              <DataGridColumn TItem="MaterialDto"
                      Field="SourceType"
                      Caption="@L["SourceType"]">
                    <DisplayTemplate>
                        @L[$"Enum:SourceType.{EnumExtensions.GetDisplayName(context.SourceType)}"]
                    </DisplayTemplate>
              </DataGridColumn>


              <DataGridColumn TItem="MaterialDto"
                      Field="FirstSync"
                      Caption="@L["FirstSync"]">
                  <DisplayTemplate>
                        @(context.FirstSync.HasValue ? context.FirstSync.Value.ToShortDateString() : string.Empty)
                  </DisplayTemplate>
              </DataGridColumn>

              <DataGridColumn TItem="MaterialDto"
                      Field="LastSync"
                      Caption="@L["LastSync"]">
                  <DisplayTemplate>
                        @(context.LastSync.HasValue ? context.LastSync.Value.ToShortDateString() : string.Empty)
                  </DisplayTemplate>
              </DataGridColumn>

            </DataGridColumns>
            
            
        </DataGrid>
    </CardBody>
</Card>

@* ************************* CREATE MODAL ************************* *@
<Modal @ref="CreateMaterialModal" Closing="@CreateMaterialModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">

        <Form id="CreateMaterialForm">
            <ModalHeader>
                <ModalTitle>@L["NewMaterial"]</ModalTitle>
                <CloseButton Clicked="CloseCreateMaterialModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@NewMaterialValidations"
                            Mode="ValidationMode.Auto"
                            Model="@NewMaterial"
                            ValidateOnLoad="false">
                     
                    
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Code"] *</FieldLabel>
                            <TextEdit @bind-Text="@NewMaterial.Code"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"] *</FieldLabel>
                            <TextEdit @bind-Text="@NewMaterial.Name"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Field>
                        <FieldLabel>@L["MeasureUnit"]</FieldLabel>
                        <Select TValue="MeasureUnit" @bind-SelectedValue="@NewMaterial.MeasureUnit">
                            @foreach (var itemValue in Enum.GetValues(typeof(MeasureUnit)))
                            {
                            var enumValue = (MeasureUnit)itemValue;
                            <SelectItem TValue="MeasureUnit" Value="@enumValue">
                                @L[$"Enum:MeasureUnit.{EnumExtensions.GetDisplayName(enumValue)}"]
                            </SelectItem>
                            }
                        </Select>
                    </Field>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Quantity"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@NewMaterial.Quantity"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Lifo"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@NewMaterial.Lifo"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["StandardPrice"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@NewMaterial.StandardPrice"    >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["AveragePrice"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@NewMaterial.AveragePrice"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["LastPrice"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@NewMaterial.LastPrice"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["AveragePriceSecond"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@NewMaterial.AveragePriceSecond"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    
                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateMaterialModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="CreateMaterialForm" Clicked="CreateMaterialAsync" />

            </ModalFooter>
        </Form>

    </ModalContent>
</Modal>

@* ************************* EDIT MODAL ************************* *@
<Modal @ref="EditMaterialModal" Closing="@EditMaterialModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">

        <Form id="EditMaterialForm">
            <ModalHeader>
                <ModalTitle>@L["Update"]</ModalTitle>
                <CloseButton Clicked="CloseEditMaterialModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditingMaterialValidations"
                            Mode="ValidationMode.Auto"
                            Model="@EditingMaterial"
                            ValidateOnLoad="false">
                     
                    
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Code"] *</FieldLabel>
                            <TextEdit @bind-Text="@EditingMaterial.Code"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"] *</FieldLabel>
                            <TextEdit @bind-Text="@EditingMaterial.Name"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>

                    
                    <Field>
                        <FieldLabel>@L["MeasureUnit"]</FieldLabel>
                        <Select TValue="MeasureUnit" @bind-SelectedValue="@EditingMaterial.MeasureUnit">
                            @foreach (var itemValue in Enum.GetValues(typeof(MeasureUnit)))
                            {
                            var enumValue = (MeasureUnit)itemValue;
                            <SelectItem TValue="MeasureUnit" Value="@enumValue">
                                @L[$"Enum:MeasureUnit.{EnumExtensions.GetDisplayName(enumValue)}"]
                            </SelectItem>
                            }
                        </Select>
                    </Field>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Quantity"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@EditingMaterial.Quantity"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Lifo"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@EditingMaterial.Lifo"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["StandardPrice"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@EditingMaterial.StandardPrice"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["AveragePrice"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@EditingMaterial.AveragePrice"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["LastPrice"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@EditingMaterial.LastPrice"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["AveragePriceSecond"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@EditingMaterial.AveragePriceSecond"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Field>
                        <FieldLabel>@L["SourceType"]</FieldLabel>
                        <Select TValue="SourceType" @bind-SelectedValue="@EditingMaterial.SourceType" ReadOnly>
                            @foreach (var itemValue in Enum.GetValues(typeof(SourceType)))
                            {
                                var enumValue = (SourceType)itemValue;
                                <SelectItem TValue="SourceType" Value="@enumValue">
                                    @L[$"Enum:SourceType.{EnumExtensions.GetDisplayName(enumValue)}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["FirstSync"]</FieldLabel>
                            <DateEdit TValue="DateTime?" InputMode="DateInputMode.DateTime" @bind-Date="@EditingMaterial.FirstSync" ReadOnly>
                               <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </DateEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["LastSync"]</FieldLabel>
                            <DateEdit TValue="DateTime?" InputMode="DateInputMode.DateTime" @bind-Date="@EditingMaterial.LastSync" ReadOnly>
                               <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </DateEdit>
                        </Field>
                    </Validation>


                    
                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditMaterialModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="EditMaterialForm" Clicked="UpdateMaterialAsync" />

            </ModalFooter>
        </Form>

    </ModalContent>
</Modal>

