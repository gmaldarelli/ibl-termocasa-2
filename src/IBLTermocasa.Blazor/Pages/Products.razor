

@page "/products"

@attribute [Authorize(IBLTermocasaPermissions.Products.Default)]
@using IBLTermocasa.Products
@using IBLTermocasa.Localization
@using IBLTermocasa.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Components.Web
@using Blazorise
@using Blazorise.Components
@using Blazorise.DataGrid
@using Volo.Abp.BlazoriseUI
@using Volo.Abp.BlazoriseUI.Components
@using Volo.Abp.ObjectMapping
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout
@using IBLTermocasa.Subproducts 

@using IBLTermocasa.Permissions
@using Volo.Abp.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components
@using Volo.Abp.Http.Client
@inherits IBLTermocasaComponentBase
@inject IProductsAppService ProductsAppService
@inject ISubproductsAppService SubproductsAppService

@inject IUiMessageService UiMessageService
@inject AbpBlazorMessageLocalizerHelper<IBLTermocasaResource> LH
@inject IRemoteServiceConfigurationProvider RemoteServiceConfigurationProvider
@inject NavigationManager NavigationManager

@* ************************* PAGE HEADER ************************* *@
<PageHeader Title="@L["Products"]" BreadcrumbItems="BreadcrumbItems" Toolbar="Toolbar">

</PageHeader>

@* ************************* SEARCH ************************* *@
<Card>
    <CardBody>

        <Form id="ProductSearchForm" class="mb-3">
            <Addons>
                <Addon AddonType="AddonType.Body">
                    <TextEdit @bind-Text="@Filter.FilterText"
                              Autofocus="true"
                              Placeholder="@L["Search"]">
                    </TextEdit>
                </Addon>
                <Addon AddonType="AddonType.End">
                    <SubmitButton Form="ProductSearchForm" Clicked="GetProductsAsync">
                        <Icon Name="IconName.Search" Class="me-1"></Icon>@L["Search"]
                    </SubmitButton>
                </Addon>
            </Addons>
        </Form>
        
        <Row Class="mt-3 mb-3"> 
            <div class="col-md-12">
                <a href="javascript:;" class="text-decoration-none" @onclick="() => ShowAdvancedFilters = !ShowAdvancedFilters">@L["SeeAdvancedFilters"]</a>
            </div>
        </Row>
        
        <div style="display: @(!ShowAdvancedFilters ? "none" : "block")">
            <Row>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Code"]</FieldLabel>
                        <TextEdit Text="@Filter.Code" TextChanged="@OnCodeChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Name"]</FieldLabel>
                        <TextEdit Text="@Filter.Name" TextChanged="@OnNameChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Description"]</FieldLabel>
                        <TextEdit Text="@Filter.Description" TextChanged="@OnDescriptionChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["IsAssembled"]</FieldLabel>
                        <Select TValue="bool?"
		SelectedValue="@Filter.IsAssembled"
		SelectedValueChanged="@OnIsAssembledChangedAsync">

<SelectItem></SelectItem>
<SelectItem Value="true">@L["Yes"]</SelectItem>
<SelectItem Value="false">@L["No"]</SelectItem>

</Select>                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["IsInternal"]</FieldLabel>
                        <Select TValue="bool?"
		SelectedValue="@Filter.IsInternal"
		SelectedValueChanged="@OnIsInternalChangedAsync">

<SelectItem></SelectItem>
<SelectItem Value="true">@L["Yes"]</SelectItem>
<SelectItem Value="false">@L["No"]</SelectItem>

</Select>                       
                    </Field>
                </Column>
            </Row>

        </div>


    </CardBody>
</Card>

@* ************************* DATA GRID ************************* *@
<Card>
    <CardBody>        
        @if (SelectedProducts.Any())
        {
            <div class="d-flex justify-content-between align-items-center mb-2">
                @if (AllProductsSelected)
                {
                    <p class="lead mb-0">
                        @L["AllItemsAreSelected", TotalCount]
                    </p>
                }
                else
                {
                    <p class="lead mb-0">
                        @if (SelectedProducts.Count > 1)
                        {
                            @L["NumberOfItemsOnThisPageAreSelected", SelectedProducts.Count]
                        }
                        else
                        {
                            @L["OneItemOnThisPageIsSelected"]
                        }
                    </p>
                }
                    
                <div>
                    @if ((SelectedProducts.Count == PageSize || SelectedProducts.Count == ProductList.Count) && TotalCount > SelectedProducts.Count)
                    {
                        if (!AllProductsSelected)
                        {
                            <Button Clicked="SelectAllItems" Class="mx-1 btn-outline-secondary">@L["SelectAllItems", TotalCount]</Button>
                        }
                        else
                        {
                            <Button Clicked="ClearSelection" Class="mx-1 btn-outline-secondary">@L["ClearSelection"]</Button>
                        }
                    }
                    
                    <Button Color="Color.Danger" Class="mx-1" Size="Size.Medium" Clicked="DeleteSelectedProductsAsync">
                        <Icon Name="@IconName.Delete" /> @L["Delete"]
                    </Button>
                </div>
            </div>
            
            <hr class="my-1 mx-0"/>
        }
        <DataGrid TItem="ProductWithNavigationPropertiesDto"
                  Data="ProductList"
                  
                  SelectionMode="DataGridSelectionMode.Multiple"
                  SelectedRows="SelectedProducts"
                  RowSelectable="@((args) => CanDeleteProduct)"
                  SelectedRowsChanged="SelectedProductRowsChanged"
                  DetailRowTrigger="@((x) => { x.Single = true; return ShouldShowDetailRow(); })"
                  DetailRowStartsVisible="false"
                  RowClicked="@((e) => { if (e.Item.Product.Id == SelectedProduct?.Product.Id) { SelectedProduct = null; } else { SelectedProduct = e.Item; } })"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  Responsive="true"
                  PageSize="PageSize"
                  Class="datagrid-detail">
            <DataGridColumns>
                
                @if (CanDeleteProduct)
                {
                    <DataGridMultiSelectColumn TItem="ProductWithNavigationPropertiesDto" Width="30px" Displayable="@(ProductList.Any())"></DataGridMultiSelectColumn>
                }
                @if (ShouldShowDetailRow())
                {
                    <DataGridColumn TItem="ProductWithNavigationPropertiesDto"
                                    Field="Product.Id"
                                    Width="0.5rem">
                        <DisplayTemplate>
                            @if (context.Product.Id == SelectedProduct?.Product.Id)
                            {
                                <i class="fas fa-chevron-up"/>
                            }
                            else
                            {
                                <i class="fas fa-chevron-down"/>
                            }
                        </DisplayTemplate>
                    </DataGridColumn>
                }
                <DataGridEntityActionsColumn TItem="ProductWithNavigationPropertiesDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="ProductWithNavigationPropertiesDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="ProductWithNavigationPropertiesDto"
                                          Visible="@CanEditProduct"
                                          Clicked="async () => await OpenEditProductModalAsync(context)"
                                          Text="@L["Edit"]"></EntityAction>
                            <EntityAction TItem="ProductWithNavigationPropertiesDto"
                                          Visible="@CanDeleteProduct"
                                          Clicked="() => DeleteProductAsync(context)"
                                          ConfirmationMessage="@(()=> L["DeleteConfirmationMessage"])"
                                          Text="@L["Delete"]"></EntityAction>

                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
               
              <DataGridColumn TItem="ProductWithNavigationPropertiesDto"
                      Field="Product.Code"
                      Caption="@L["Code"]">
              </DataGridColumn>

              <DataGridColumn TItem="ProductWithNavigationPropertiesDto"
                      Field="Product.Name"
                      Caption="@L["Name"]">
              </DataGridColumn>

              <DataGridColumn TItem="ProductWithNavigationPropertiesDto"
                      Field="Product.IsAssembled"
                      Caption="@L["IsAssembled"]">
                    <DisplayTemplate>
                        @if (context.Product.IsAssembled)
                        {
                            <Icon TextColor="TextColor.Success" Name="@IconName.Check" />
                        }
                        else
                        {
                            <Icon TextColor="TextColor.Danger" Name="@IconName.Times" />
                        }
                    </DisplayTemplate>
              </DataGridColumn>


              <DataGridColumn TItem="ProductWithNavigationPropertiesDto"
                      Field="Product.IsInternal"
                      Caption="@L["IsInternal"]">
                    <DisplayTemplate>
                        @if (context.Product.IsInternal)
                        {
                            <Icon TextColor="TextColor.Success" Name="@IconName.Check" />
                        }
                        else
                        {
                            <Icon TextColor="TextColor.Danger" Name="@IconName.Times" />
                        }
                    </DisplayTemplate>
              </DataGridColumn>


            </DataGridColumns>
            
            <DetailRowTemplate>
    <div class="bg-light rounded p-3 pb-0 pt-1">
        <Tabs SelectedTab="@SelectedChildTab" SelectedTabChanged="@OnSelectedChildTabChanged">
            <Items>
                <Tab Name="subproduct-tab">@L["Subproducts"]</Tab>
            </Items>
            
            <Content>
                                        <TabPanel Name="subproduct-tab" Class="mt-0">
                            @if (CanCreateSubproduct)
                            {
                                <Row Class="mb-2">
                                    <Column Class="d-flex justify-content-end">
                                        <Button Color="Color.Primary" Clicked="async () => await OpenCreateSubproductModalAsync(context.Product.Id)">
                                            <i class="fas fa-plus me-1"></i>@L["NewSubproduct"]
                                        </Button>
                                    </Column>
                                </Row>
                            }

                            @{
                                var subproducts = (context as ProductWithNavigationPropertiesDto).Product.Subproducts;

                                <DataGrid @ref="@SubproductDataGrids[context.Product.Id]"
                                          TItem="SubproductWithNavigationPropertiesDto"
                                          Data="subproducts"
                                          ReadData="@((args) => OnSubproductDataGridReadAsync(args, context.Product.Id))"
                                          Sortable="true"
                                          ShowCaptions="true"
                                          ShowPager="true"
                                          Responsive="true"
                                          PageSize="SubproductPageSize">

                                    <DataGridColumns>

                                        <DataGridEntityActionsColumn TItem="SubproductWithNavigationPropertiesDto" @ref="@SubproductEntityActionsColumns">
                                            <DisplayTemplate Context="subproduct_context">
                                                <EntityActions TItem="SubproductWithNavigationPropertiesDto" EntityActionsColumn="@SubproductEntityActionsColumns">
                                                    <EntityAction TItem="SubproductWithNavigationPropertiesDto"
                                                                  Visible="@CanEditSubproduct"
                                                                  Clicked="async () => await OpenEditSubproductModalAsync(subproduct_context)"
                                                                  Text="@L["Edit"]">
                                                    </EntityAction>
                                                    <EntityAction TItem="SubproductWithNavigationPropertiesDto"
                                                                  Visible="@CanDeleteSubproduct"
                                                                  Clicked="async () => await DeleteSubproductAsync(subproduct_context)"
                                                                  ConfirmationMessage="@(() => L["DeleteConfirmationMessage"])"
                                                                  Text="@L["Delete"]">
                                                    </EntityAction>
                                                </EntityActions>
                                            </DisplayTemplate>
                                        </DataGridEntityActionsColumn>

                                        <DataGridCommandColumn/>

                                        
              <DataGridColumn TItem="SubproductWithNavigationPropertiesDto"
                      Field="Subproduct.Order"
                      Caption="@L["Order"]">
              </DataGridColumn>

              <DataGridColumn TItem="SubproductWithNavigationPropertiesDto"
                      Field="Subproduct.Name"
                      Caption="@L["Name"]">
              </DataGridColumn>

              <DataGridColumn TItem="SubproductWithNavigationPropertiesDto"
                      Field="Subproduct.IsSingleProduct"
                      Caption="@L["IsSingleProduct"]">
                    <DisplayTemplate Context="subproduct_context">
                        @if (subproduct_context.Subproduct.IsSingleProduct)
                        {
                            <Icon TextColor="TextColor.Success" Name="@IconName.Check" />
                        }
                        else
                        {
                            <Icon TextColor="TextColor.Danger" Name="@IconName.Times" />
                        }
                    </DisplayTemplate>
              </DataGridColumn>


              <DataGridColumn TItem="SubproductWithNavigationPropertiesDto"
                      Field="Subproduct.Mandatory"
                      Caption="@L["Mandatory"]">
                    <DisplayTemplate Context="subproduct_context">
                        @if (subproduct_context.Subproduct.Mandatory)
                        {
                            <Icon TextColor="TextColor.Success" Name="@IconName.Check" />
                        }
                        else
                        {
                            <Icon TextColor="TextColor.Danger" Name="@IconName.Times" />
                        }
                    </DisplayTemplate>
              </DataGridColumn>


              <DataGridColumn TItem="SubproductWithNavigationPropertiesDto"
                      Field="Product.Name"
                      Caption="@L["SingleProduct"]">
              </DataGridColumn>

                                    </DataGridColumns>
                                </DataGrid>
                            }
                        </TabPanel>
            </Content>
        </Tabs>
    </div>
</DetailRowTemplate>
        </DataGrid>
    </CardBody>
</Card>

@* ************************* CREATE MODAL ************************* *@
<Modal @ref="CreateProductModal" Closing="@CreateProductModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">

        <Form id="CreateProductForm">
            <ModalHeader>
                <ModalTitle>@L["NewProduct"]</ModalTitle>
                <CloseButton Clicked="CloseCreateProductModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Tabs SelectedTab="@SelectedCreateTab" SelectedTabChanged="@OnSelectedCreateTabChanged">
                    <Items>
                        <Tab Name="product-create-tab">@L["Product"].Value</Tab> 
                        <Tab Name="components-create-tab">@L["Components"].Value</Tab>
                        <Tab Name="questionTemplates-create-tab">@L["QuestionTemplates"].Value</Tab>
                    </Items>
                    <Content>
                <Validations @ref="@NewProductValidations"
                            Mode="ValidationMode.Auto"
                            Model="@NewProduct"
                            ValidateOnLoad="false">
                     <TabPanel Name="product-create-tab">
                    
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Code"] *</FieldLabel>
                            <TextEdit @bind-Text="@NewProduct.Code"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"] *</FieldLabel>
                            <TextEdit @bind-Text="@NewProduct.Name"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Description"]</FieldLabel>
                            <MemoEdit @bind-Text="@NewProduct.Description"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </MemoEdit>
                        </Field>
                    </Validation>


                    <Field>
                        <Check TValue="bool" @bind-Checked="@NewProduct.IsAssembled" >@L["IsAssembled"]</Check>
                    </Field>

                    <Field>
                        <Check TValue="bool" @bind-Checked="@NewProduct.IsInternal" >@L["IsInternal"]</Check>
                    </Field>

                    </TabPanel>
                                                <TabPanel Name="components-create-tab">

                                <Row>
                                    <Column ColumnSize="ColumnSize.Is9">
                                        <Field>

                                            <Autocomplete Data="@Components"
                                                          TItem="LookupDto<Guid>"
                                                          TValue="string"
                                                          TextField="@((item) => item.DisplayName)"
                                                          ValueField="@((item) => item.Id.ToString())"
                                                          SearchChanged="@GetComponentLookupAsync"
                                                          @bind-SelectedValue="@SelectedComponentId"
                                                          @bind-SelectedText="@SelectedComponentText"
                                                          Placeholder="&#8212;"/>
                                        </Field>
                                    </Column>

                                    <Column ColumnSize="ColumnSize.Is3">
                                        <Button Color="Color.Info" TextColor="TextColor.White" Size="Size.Medium" Clicked="AddComponent">
                                            <Icon class="fa fa-plus"></Icon> @L["Add"]
                                        </Button>
                                    </Column>
                                </Row>
                                @if (SelectedComponents.Any())
                                {
                                    <Table striped-rows="true" responsive-sm="true" class="mt-2">
                                        <TableHeader>
                                            <TableHeaderCell><Span class="float-start">@L["Name"]</Span></TableHeaderCell>
                                        </TableHeader>
                                        <TableBody>
                                            @foreach (var component in SelectedComponents)
                                            {
                                                <TableRow>
                                                    <TableRowCell><Span class="float-start">@component.DisplayName</Span></TableRowCell>
                                                    <TableRowCell>
                                                        <span class="btn btn-danger btn-sm float-end"
                                                              @onclick="() => SelectedComponents.RemoveAll(s => s.Id == component.Id)">
                                                            <Icon Class="fa fa-trash"></Icon>
                                                        </span>
                                                    </TableRowCell>
                                                </TableRow>
                                            }
                                        </TableBody>
                                    </Table>
                                }
                            </TabPanel>                            <TabPanel Name="questionTemplates-create-tab">

                                <Row>
                                    <Column ColumnSize="ColumnSize.Is9">
                                        <Field>

                                            <Autocomplete Data="@QuestionTemplates"
                                                          TItem="LookupDto<Guid>"
                                                          TValue="string"
                                                          TextField="@((item) => item.DisplayName)"
                                                          ValueField="@((item) => item.Id.ToString())"
                                                          SearchChanged="@GetQuestionTemplateLookupAsync"
                                                          @bind-SelectedValue="@SelectedQuestionTemplateId"
                                                          @bind-SelectedText="@SelectedQuestionTemplateText"
                                                          Placeholder="&#8212;"/>
                                        </Field>
                                    </Column>

                                    <Column ColumnSize="ColumnSize.Is3">
                                        <Button Color="Color.Info" TextColor="TextColor.White" Size="Size.Medium" Clicked="AddQuestionTemplate">
                                            <Icon class="fa fa-plus"></Icon> @L["Add"]
                                        </Button>
                                    </Column>
                                </Row>
                                @if (SelectedQuestionTemplates.Any())
                                {
                                    <Table striped-rows="true" responsive-sm="true" class="mt-2">
                                        <TableHeader>
                                            <TableHeaderCell><Span class="float-start">@L["QuestionText"]</Span></TableHeaderCell>
                                        </TableHeader>
                                        <TableBody>
                                            @foreach (var questionTemplate in SelectedQuestionTemplates)
                                            {
                                                <TableRow>
                                                    <TableRowCell><Span class="float-start">@questionTemplate.DisplayName</Span></TableRowCell>
                                                    <TableRowCell>
                                                        <span class="btn btn-danger btn-sm float-end"
                                                              @onclick="() => SelectedQuestionTemplates.RemoveAll(s => s.Id == questionTemplate.Id)">
                                                            <Icon Class="fa fa-trash"></Icon>
                                                        </span>
                                                    </TableRowCell>
                                                </TableRow>
                                            }
                                        </TableBody>
                                    </Table>
                                }
                            </TabPanel>
                </Validations>
                    </Content>
                </Tabs>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateProductModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="CreateProductForm" Clicked="CreateProductAsync" />

            </ModalFooter>
        </Form>

    </ModalContent>
</Modal>

@* ************************* EDIT MODAL ************************* *@
<Modal @ref="EditProductModal" Closing="@EditProductModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">

        <Form id="EditProductForm">
            <ModalHeader>
                <ModalTitle>@L["Update"]</ModalTitle>
                <CloseButton Clicked="CloseEditProductModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Tabs SelectedTab="@SelectedEditTab" SelectedTabChanged="@OnSelectedEditTabChanged">
                    <Items>
                        <Tab Name="product-edit-tab">@L["Product"].Value</Tab>
                        
                        <Tab Name="components-edit-tab">@L["Components"].Value</Tab>
                        <Tab Name="questionTemplates-edit-tab">@L["QuestionTemplates"].Value</Tab>
                    </Items>
                    <Content>
                <Validations @ref="@EditingProductValidations"
                            Mode="ValidationMode.Auto"
                            Model="@EditingProduct"
                            ValidateOnLoad="false">
                     <TabPanel Name="product-edit-tab">
                    
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Code"] *</FieldLabel>
                            <TextEdit @bind-Text="@EditingProduct.Code"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"] *</FieldLabel>
                            <TextEdit @bind-Text="@EditingProduct.Name"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Description"]</FieldLabel>
                            <MemoEdit @bind-Text="@EditingProduct.Description"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </MemoEdit>
                        </Field>
                    </Validation>


                    <Field>
                        <Check TValue="bool" @bind-Checked="@EditingProduct.IsAssembled" >@L["IsAssembled"]</Check>
                    </Field>

                    <Field>
                        <Check TValue="bool" @bind-Checked="@EditingProduct.IsInternal" >@L["IsInternal"]</Check>
                    </Field>

                    </TabPanel>
                                                <TabPanel Name="components-edit-tab">

                                <Row>
                                    <Column ColumnSize="ColumnSize.Is9">
                                        <Field>

                                            <Autocomplete Data="@Components"
                                                          TItem="LookupDto<Guid>"
                                                          TValue="string"
                                                          TextField="@((item) => item.DisplayName)"
                                                          ValueField="@((item) => item.Id.ToString())"
                                                          SearchChanged="@GetComponentLookupAsync"
                                                          @bind-SelectedValue="@SelectedComponentId"
                                                          @bind-SelectedText="@SelectedComponentText"
                                                          Placeholder="&#8212;"/>
                                        </Field>
                                    </Column>

                                    <Column ColumnSize="ColumnSize.Is3">
                                        <Button Color="Color.Info" TextColor="TextColor.White" Size="Size.Medium" Clicked="AddComponent">
                                            <Icon class="fa fa-plus"></Icon> @L["Add"]
                                        </Button>
                                    </Column>
                                </Row>
                                @if (SelectedComponents.Any())
                                {
                                    <Table striped-rows="true" responsive-sm="true" class="mt-2">
                                        <TableHeader>
                                            <TableHeaderCell><Span class="float-start">@L["Name"]</Span></TableHeaderCell>
                                        </TableHeader>
                                        <TableBody>
                                            @foreach (var component in SelectedComponents)
                                            {
                                                <TableRow>
                                                    <TableRowCell><Span class="float-start">@component.DisplayName</Span></TableRowCell>
                                                    <TableRowCell>
                                                        <span class="btn btn-danger btn-sm float-end"
                                                              @onclick="() => SelectedComponents.RemoveAll(s => s.Id == component.Id)">
                                                            <Icon Class="fa fa-trash"></Icon>
                                                        </span>
                                                    </TableRowCell>
                                                </TableRow>
                                            }
                                        </TableBody>
                                    </Table>
                                }
                            </TabPanel>                            <TabPanel Name="questionTemplates-edit-tab">

                                <Row>
                                    <Column ColumnSize="ColumnSize.Is9">
                                        <Field>

                                            <Autocomplete Data="@QuestionTemplates"
                                                          TItem="LookupDto<Guid>"
                                                          TValue="string"
                                                          TextField="@((item) => item.DisplayName)"
                                                          ValueField="@((item) => item.Id.ToString())"
                                                          SearchChanged="@GetQuestionTemplateLookupAsync"
                                                          @bind-SelectedValue="@SelectedQuestionTemplateId"
                                                          @bind-SelectedText="@SelectedQuestionTemplateText"
                                                          Placeholder="&#8212;"/>
                                        </Field>
                                    </Column>

                                    <Column ColumnSize="ColumnSize.Is3">
                                        <Button Color="Color.Info" TextColor="TextColor.White" Size="Size.Medium" Clicked="AddQuestionTemplate">
                                            <Icon class="fa fa-plus"></Icon> @L["Add"]
                                        </Button>
                                    </Column>
                                </Row>
                                @if (SelectedQuestionTemplates.Any())
                                {
                                    <Table striped-rows="true" responsive-sm="true" class="mt-2">
                                        <TableHeader>
                                            <TableHeaderCell><Span class="float-start">@L["QuestionText"]</Span></TableHeaderCell>
                                        </TableHeader>
                                        <TableBody>
                                            @foreach (var questionTemplate in SelectedQuestionTemplates)
                                            {
                                                <TableRow>
                                                    <TableRowCell><Span class="float-start">@questionTemplate.DisplayName</Span></TableRowCell>
                                                    <TableRowCell>
                                                        <span class="btn btn-danger btn-sm float-end"
                                                              @onclick="() => SelectedQuestionTemplates.RemoveAll(s => s.Id == questionTemplate.Id)">
                                                            <Icon Class="fa fa-trash"></Icon>
                                                        </span>
                                                    </TableRowCell>
                                                </TableRow>
                                            }
                                        </TableBody>
                                    </Table>
                                }
                            </TabPanel>
                </Validations>
                    </Content>
                </Tabs>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditProductModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="EditProductForm" Clicked="UpdateProductAsync" />

            </ModalFooter>
        </Form>

    </ModalContent>
</Modal>

@* ************************* Subproduct: CREATE MODAL ************************* *@
<Modal @ref="CreateSubproductModal" Closing="@CreateSubproductModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
        <Form id="CreateSubproductForm">
            <ModalHeader>
                <ModalTitle>@L["NewSubproduct"]</ModalTitle>
                <CloseButton Clicked="CloseCreateSubproductModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Tabs SelectedTab="@SelectedCreateTab" SelectedTabChanged="@OnSelectedCreateTabChanged">
                    <Items>
                        <Tab Name="product-create-tab">@L["Product"].Value</Tab> 
                        <Tab Name="components-create-tab">@L["Components"].Value</Tab>
                        <Tab Name="questionTemplates-create-tab">@L["QuestionTemplates"].Value</Tab>
                    </Items>
                    <Content>
                <Validations @ref="@NewSubproductValidations"
                             Mode="ValidationMode.Auto"
                             Model="@NewSubproduct"
                             ValidateOnLoad="false">
                     
                    
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Order"]</FieldLabel>
                            <NumericPicker TValue="int" @bind-Value="@NewSubproduct.Order"  Decimals="0" >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"] *</FieldLabel>
                            <TextEdit @bind-Text="@NewSubproduct.Name"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Field>
                        <Check TValue="bool" @bind-Checked="@NewSubproduct.IsSingleProduct" >@L["IsSingleProduct"]</Check>
                    </Field>

                    <Field>
                        <Check TValue="bool" @bind-Checked="@NewSubproduct.Mandatory" >@L["Mandatory"]</Check>
                    </Field>

                    <Field>
                        <FieldLabel>@L["Product"]</FieldLabel>
                        <Select TValue="Guid?" @bind-SelectedValue="@NewSubproduct.SingleProductId">
                            <SelectItem TValue="Guid?" Value="null"></SelectItem>
                            @foreach (var product in ProductsCollection)
                            {
                                <SelectItem TValue="Guid?" Value="@(product.Id)">
                                    @(product.DisplayName)
                                </SelectItem>
                            }
                        </Select>
                    </Field>


                    
                </Validations>
                    </Content>
                </Tabs>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateSubproductModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="CreateSubproductForm" Clicked="CreateSubproductAsync" />
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@* ************************* Subproduct: EDIT MODAL ************************* *@
<Modal @ref="EditSubproductModal" Closing="@EditSubproductModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
        <Form id="EditSubproductForm">
            <ModalHeader>
                <ModalTitle>@L["Update"]</ModalTitle>
                <CloseButton Clicked="CloseEditSubproductModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Tabs SelectedTab="@SelectedEditTab" SelectedTabChanged="@OnSelectedEditTabChanged">
                    <Items>
                        <Tab Name="product-edit-tab">@L["Product"].Value</Tab>
                        
                        <Tab Name="components-edit-tab">@L["Components"].Value</Tab>
                        <Tab Name="questionTemplates-edit-tab">@L["QuestionTemplates"].Value</Tab>
                    </Items>
                    <Content>
                <Validations @ref="@EditingSubproductValidations"
                             Mode="ValidationMode.Auto"
                             Model="@EditingSubproduct"
                             ValidateOnLoad="false">
                     
                    
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Order"]</FieldLabel>
                            <NumericPicker TValue="int" @bind-Value="@EditingSubproduct.Order"  Decimals="0" >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"] *</FieldLabel>
                            <TextEdit @bind-Text="@EditingSubproduct.Name"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Field>
                        <Check TValue="bool" @bind-Checked="@EditingSubproduct.IsSingleProduct" >@L["IsSingleProduct"]</Check>
                    </Field>

                    <Field>
                        <Check TValue="bool" @bind-Checked="@EditingSubproduct.Mandatory" >@L["Mandatory"]</Check>
                    </Field>

                    <Field>
                        <FieldLabel>@L["Product"]</FieldLabel>
                        <Select TValue="Guid?" @bind-SelectedValue="@EditingSubproduct.SingleProductId">
                            <SelectItem TValue="Guid?" Value="null"></SelectItem>
                            @foreach (var product in ProductsCollection)
                            {
                                <SelectItem TValue="Guid?" Value="@(product.Id)">
                                    @(product.DisplayName)
                                </SelectItem>
                            }
                        </Select>
                    </Field>


                    
                </Validations>
                    </Content>
                </Tabs>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditSubproductModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="EditSubproductForm" Clicked="UpdateSubproductAsync" />
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>