

@page "/quotations"

@attribute [Authorize(IBLTermocasaPermissions.Quotations.Default)]
@using IBLTermocasa.Quotations
@using IBLTermocasa.Localization
@using Microsoft.AspNetCore.Authorization

@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout

@using IBLTermocasa.Permissions
@using Volo.Abp.AspNetCore.Components.Web
@using Volo.Abp.Http.Client
@using MudBlazor
@using Size = MudBlazor.Size
@using Color = MudBlazor.Color
@inherits IBLTermocasaComponentBase
@inject IQuotationsAppService QuotationsAppService

@inject IUiMessageService UiMessageService
@inject AbpBlazorMessageLocalizerHelper<IBLTermocasaResource> LH
@inject IRemoteServiceConfigurationProvider RemoteServiceConfigurationProvider
@inject NavigationManager NavigationManager
@using IBLTermocasa.Types


@* ************************* PAGE HEADER ************************* *@
<PageHeader Title="@L["Quotations"]" BreadcrumbItems="BreadcrumbItems" Toolbar="Toolbar">

</PageHeader>

@* ************************* SEARCH ************************* *@
<Card>
    <CardBody>

        <Form id="QuotationSearchForm" class="mb-3">
            <Addons>
                <Addon AddonType="AddonType.Body">
                    <TextEdit @bind-Text="@Filter.FilterText"
                              Autofocus="true"
                              Placeholder="@L["Search"]">
                    </TextEdit>
                </Addon>
                <Addon AddonType="AddonType.End">
                    <SubmitButton Form="QuotationSearchForm" Clicked="GetQuotationsAsync">
                        <Icon Name="IconName.Search" Class="me-1"></Icon>@L["Search"]
                    </SubmitButton>
                </Addon>
            </Addons>
        </Form>
        
        <Blazorise.Row Class="mt-3 mb-3"> 
            <div class="col-md-12">
                <a href="javascript:;" class="text-decoration-none" @onclick="() => ShowAdvancedFilters = !ShowAdvancedFilters">@L["SeeAdvancedFilters"]</a>
            </div>
        </Blazorise.Row>
        
        <div style="display: @(!ShowAdvancedFilters ? "none" : "block")">
            <Blazorise.Row>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Code"]</FieldLabel>
                        <TextEdit Text="@Filter.Code" TextChanged="@OnCodeChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Name"]</FieldLabel>
                        <TextEdit Text="@Filter.Name" TextChanged="@OnNameChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["MinSentDate"]</FieldLabel>
                        <DatePicker TValue="DateTime?"
            InputMode="DateInputMode.Date"
            Date="@Filter.SentDateMin"
            DateChanged="@OnSentDateMinChangedAsync"
            Placeholder="@string.Empty" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["MaxSentDate"]</FieldLabel>
                        <DatePicker TValue="DateTime?"
            InputMode="DateInputMode.Date"
            Date="@Filter.SentDateMax"
            DateChanged="@OnSentDateMaxChangedAsync"
            Placeholder="@string.Empty" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["MinQuotationValidDate"]</FieldLabel>
                        <DatePicker TValue="DateTime?"
            InputMode="DateInputMode.Date"
            Date="@Filter.QuotationValidDateMin"
            DateChanged="@OnQuotationValidDateMinChangedAsync"
            Placeholder="@string.Empty" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["MaxQuotationValidDate"]</FieldLabel>
                        <DatePicker TValue="DateTime?"
            InputMode="DateInputMode.Date"
            Date="@Filter.QuotationValidDateMax"
            DateChanged="@OnQuotationValidDateMaxChangedAsync"
            Placeholder="@string.Empty" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["MinConfirmedDate"]</FieldLabel>
                        <DatePicker TValue="DateTime?"
            InputMode="DateInputMode.Date"
            Date="@Filter.ConfirmedDateMin"
            DateChanged="@OnConfirmedDateMinChangedAsync"
            Placeholder="@string.Empty" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["MaxConfirmedDate"]</FieldLabel>
                        <DatePicker TValue="DateTime?"
            InputMode="DateInputMode.Date"
            Date="@Filter.ConfirmedDateMax"
            DateChanged="@OnConfirmedDateMaxChangedAsync"
            Placeholder="@string.Empty" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Status"]</FieldLabel>
                        <Select TValue="QuotationStatus?"
		SelectedValue="@Filter.Status"
		SelectedValueChanged="@OnStatusChangedAsync">

<SelectItem></SelectItem>

@foreach(QuotationStatus value in Enum.GetValues(typeof(QuotationStatus)))
{
	<SelectItem Value="value">
		@value
	</SelectItem>
}

</Select>                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["DepositRequired"]</FieldLabel>
                        <Select TValue="bool?"
		SelectedValue="@Filter.DepositRequired"
		SelectedValueChanged="@OnDepositRequiredChangedAsync">

<SelectItem></SelectItem>
<SelectItem Value="true">@L["Yes"]</SelectItem>
<SelectItem Value="false">@L["No"]</SelectItem>

</Select>                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["MinDepositRequiredValue"]</FieldLabel>
                        <NumericEdit TValue="double?" 
             Value="@Filter.DepositRequiredValueMin"
             ValueChanged="@OnDepositRequiredValueMinChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["MaxDepositRequiredValue"]</FieldLabel>
                        <NumericEdit TValue="double?" 
             Value="@Filter.DepositRequiredValueMax"
             ValueChanged="@OnDepositRequiredValueMaxChangedAsync" />                       
                    </Field>
                </Column>
            </Blazorise.Row>

        </div>


    </CardBody>
</Card>

@* ************************* DATA GRID ************************* *@
<MudCard>
    <MudCardContent>
        <MudDataGrid @ref="QuotationMudDataGrid" Dense="true" Striped="true" Items="QuotationList" >
            <Columns>
                <PropertyColumn Property="x => x.Code" Title="@L["Code"]"/>
                <PropertyColumn Property="x => x.Name" Title="@L["Name"]"/>
                <PropertyColumn Property="x => x.SentDate" Title="@L["SentDate"]"/>
                <TemplateColumn Title="@L["SentDate"]">
                    <CellTemplate Context="context">
                        @(context.Item.SentDate.ToShortDateString())
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn Title="@L["QuotationValidDate"]">
                    <CellTemplate Context="context">
                        @(context.Item.QuotationValidDate.ToShortDateString())
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn Title="@L["ConfirmedDate"]">
                    <CellTemplate Context="context">
                        @(context.Item.ConfirmedDate.HasValue ? context.Item.ConfirmedDate.Value.ToShortDateString() : string.Empty)
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn Title="@L["Status"]">
                    <CellTemplate Context="context">
                        @L[$"Enum:QuotationStatus.{EnumExtensions.GetDisplayName(context.Item.Status)}"]
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn Title="@L["DepositRequired"]">
                    <CellTemplate Context="context">
                        @if (context.Item.DepositRequired)
                        {
                            <Icon TextColor="TextColor.Success" Name="@IconName.Check" />
                        }
                        else
                        {
                            <Icon TextColor="TextColor.Danger" Name="@IconName.Times" />
                        }
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="x => x.DepositRequiredValue" Title="@L["DepositRequiredValue"]"/>
                <TemplateColumn StickyRight="true">
                    <CellTemplate>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.RemoveRedEye" OnClick="() => OpenEditQuotationPageAsync(context.Item)"/>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Remove" OnClick="() => DeleteQuotationAsync(context.Item)"/>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="QuotationDto" />
            </PagerContent>
        </MudDataGrid>
    </MudCardContent>
</MudCard>
<MudThemeProvider/>
<MudDialogProvider/>
@*
<Card>
    <CardBody>
        <DataGrid TItem="QuotationDto"
                  Data="QuotationList"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  Responsive="true"
                  PageSize="PageSize"
                  Class="datagrid-detail">
            <DataGridColumns>
                
                
                <DataGridEntityActionsColumn TItem="QuotationDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="QuotationDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="QuotationDto"
                                          Visible="@CanEditQuotation"
                                          Clicked="async () => await OpenEditQuotationModalAsync(context)"
                                          Text="@L["Edit"]"></EntityAction>
                            <EntityAction TItem="QuotationDto"
                                          Visible="@CanDeleteQuotation"
                                          Clicked="() => DeleteQuotationAsync(context)"
                                          ConfirmationMessage="@(()=> L["DeleteConfirmationMessage"])"
                                          Text="@L["Delete"]"></EntityAction>

                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
               
              <DataGridColumn TItem="QuotationDto"
                      Field="IdRFQ"
                      Caption="@L["IdRFQ"]">
              </DataGridColumn>

              <DataGridColumn TItem="QuotationDto"
                      Field="IdBOM"
                      Caption="@L["IdBOM"]">
              </DataGridColumn>

              <DataGridColumn TItem="QuotationDto"
                      Field="Code"
                      Caption="@L["Code"]">
              </DataGridColumn>

              <DataGridColumn TItem="QuotationDto"
                      Field="Name"
                      Caption="@L["Name"]">
              </DataGridColumn>

              <DataGridColumn TItem="QuotationDto"
                      Field="SentDate"
                      Caption="@L["SentDate"]">
                  <DisplayTemplate>
                        @context.SentDate.ToShortDateString()
                  </DisplayTemplate>
              </DataGridColumn>

              <DataGridColumn TItem="QuotationDto"
                      Field="QuotationValidDate"
                      Caption="@L["QuotationValidDate"]">
                  <DisplayTemplate>
                        @context.QuotationValidDate.ToShortDateString()
                  </DisplayTemplate>
              </DataGridColumn>

              <DataGridColumn TItem="QuotationDto"
                      Field="ConfirmedDate"
                      Caption="@L["ConfirmedDate"]">
                  <DisplayTemplate>
                        @(context.ConfirmedDate.HasValue ? context.ConfirmedDate.Value.ToShortDateString() : string.Empty)
                  </DisplayTemplate>
              </DataGridColumn>

              <DataGridColumn TItem="QuotationDto"
                      Field="Status"
                      Caption="@L["Status"]">
                    <DisplayTemplate>
                        @L[$"Enum:QuotationStatus.{EnumExtensions.GetDisplayName(context.Status)}"]
                    </DisplayTemplate>
              </DataGridColumn>


              <DataGridColumn TItem="QuotationDto"
                      Field="DepositRequired"
                      Caption="@L["DepositRequired"]">
                    <DisplayTemplate>
                        @if (context.DepositRequired)
                        {
                            <Icon TextColor="TextColor.Success" Name="@IconName.Check" />
                        }
                        else
                        {
                            <Icon TextColor="TextColor.Danger" Name="@IconName.Times" />
                        }
                    </DisplayTemplate>
              </DataGridColumn>


              <DataGridColumn TItem="QuotationDto"
                      Field="DepositRequiredValue"
                      Caption="@L["DepositRequiredValue"]">
              </DataGridColumn>

              <DataGridColumn TItem="QuotationDto"
                      Field="QuotationItems"
                      Caption="@L["QuotationItems"]">
              </DataGridColumn>

            </DataGridColumns>
            
            
        </DataGrid>
    </CardBody>
</Card>
*@
