@page "/organizations"

@attribute [Authorize(IBLTermocasaPermissions.Organizations.Default)]
@using IBLTermocasa.Blazor.Components.Organization
@using IBLTermocasa.Industries
@using IBLTermocasa.Localization
@using IBLTermocasa.Organizations
@using IBLTermocasa.Permissions
@using IBLTermocasa.Types
@using Microsoft.AspNetCore.Authorization
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Web
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout
@using Volo.Abp.Http.Client
@using Size = MudBlazor.Size
@using MudBlazor
@inherits IBLTermocasaComponentBase
@inject IOrganizationsAppService OrganizationsAppService
@inject IIndustriesAppService IndustriesAppService
@inject IUiMessageService UiMessageService
@inject AbpBlazorMessageLocalizerHelper<IBLTermocasaResource> LH
@inject IRemoteServiceConfigurationProvider RemoteServiceConfigurationProvider
@inject NavigationManager NavigationManager
@inject IModalService  ModalService

<PageHeader Title="@L["Organizations"]" BreadcrumbItems="BreadcrumbItems" Toolbar="Toolbar">

</PageHeader>

@* ************************* SEARCH ************************* *@
<Card>
    <CardBody>

        <Form id="OrganizationSearchForm" class="mb-3">
            <Addons>
                <Addon AddonType="AddonType.Body">
                    <TextEdit @bind-Text="@Filter.FilterText"
                              Autofocus="true"
                              Placeholder="@L["Search"]">
                    </TextEdit>
                </Addon>
                <Addon AddonType="AddonType.End">
                    <SubmitButton Form="OrganizationSearchForm" Clicked="GetOrganizationsAsync">
                        <Icon Name="IconName.Search" Class="me-1"></Icon>@L["Search"]
                    </SubmitButton>
                </Addon>
            </Addons>
        </Form>

        <Blazorise.Row Class="mt-3 mb-3">
            <div class="col-md-12">
                <a href="javascript:;" class="text-decoration-none" @onclick="() => ShowAdvancedFilters = !ShowAdvancedFilters">@L["SeeAdvancedFilters"]</a>
            </div>
        </Blazorise.Row>

        <div style="display: @(!ShowAdvancedFilters ? "none" : "block")">
            <Blazorise.Row>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Code"]</FieldLabel>
                        <TextEdit Text="@Filter.Code" TextChanged="@OnCodeChangedAsync" />
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Name"]</FieldLabel>
                        <TextEdit Text="@Filter.Name" TextChanged="@OnNameChangedAsync" />
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["OrganizationType"]</FieldLabel>
                        <Select TValue="OrganizationType?"
                                SelectedValue="@Filter.OrganizationType"
                                SelectedValueChanged="@OnOrganizationTypeChangedAsync">

                            <SelectItem></SelectItem>

                            @foreach(OrganizationType value in Enum.GetValues(typeof(OrganizationType)))
                            {
                                <SelectItem Value="value">
                                    @value
                                </SelectItem>
                            }

                        </Select>
                    </Field>
                </Column>

                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["SourceType"]</FieldLabel>
                        <Select TValue="SourceType?"
                                SelectedValue="@Filter.SourceType"
                                SelectedValueChanged="@OnSourceTypeChangedAsync">

                            <SelectItem></SelectItem>

                            @foreach(SourceType value in Enum.GetValues(typeof(SourceType)))
                            {
                            <SelectItem Value="value">
                                @value
                            </SelectItem>
                            }

                        </Select>
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["MailInfo"]</FieldLabel>
                        <TextEdit Text="@Filter.MailInfo" TextChanged="@OnMailInfoChangedAsync" />
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["PhoneInfo"]</FieldLabel>
                        <TextEdit Text="@Filter.PhoneInfo" TextChanged="@OnPhoneInfoChangedAsync" />
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Tags"]</FieldLabel>
                        <TextEdit Text="@Filter.Tags" TextChanged="@OnTagsChangedAsync" />
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Industry"]</FieldLabel>
                        <Select TValue="Guid?"
                                SelectedValue="@Filter.IndustryId"
                                SelectedValueChanged="@OnIndustryIdChangedAsync">

                            <SelectItem></SelectItem>

                            @foreach(var item in IndustriesCollection)
                            {
                            <SelectItem TValue="Guid" Value="@item.Id">
                                @item.DisplayName
                            </SelectItem>
                            }

                        </Select>
                    </Field>
                </Column>
            </Blazorise.Row>

        </div>


    </CardBody>
</Card>

<MudCard>
    <MudCardContent>
        <MudDataGrid @ref="OrganizationMudDataGrid" Dense="true" Striped="true" Items="OrganizationList" >
            <Columns>
                <PropertyColumn Property="x => x.Code" Title="@L["Title"]"/>
                <PropertyColumn Property="x => x.Name" Title="@L["Name"]"/>
                <PropertyColumn Property="x => x.Phones" Title="@L["Phones"]"/>
                <PropertyColumn Property="x => x.Emails" Title="@L["Emails"]"/>
                <TemplateColumn Title="@L["Industry"]">
                    <CellTemplate Context="context">
                        @((context)?.Item.IndustryId != null ? Industries.FirstOrDefault(ind => ind.Id == ((context)?.Item.IndustryId))?.Code : "N/A")
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn Title="@L["OrganizationType"]">
                    <CellTemplate Context="context">
                        @L[$"Enum:OrganizationType.{(string)context.Item.OrganizationType.ToString()}"]
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn Title="@L["SourceType"]">
                    <CellTemplate Context="context">
                        @L[$"Enum:SourceType.{(int)context.Item.SourceType}"]
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn Title="@L["FirstSync"]">
                    <CellTemplate Context="context">
                        @(context.Item.FirstSync.HasValue ? context.Item.FirstSync.Value.ToShortDateString() : string.Empty)
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn Title="@L["LastSync"]">
                    <CellTemplate Context="context">
                        @(context.Item.LastSync.HasValue ? context.Item.LastSync.Value.ToShortDateString() : string.Empty)
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn StickyRight="true">
                    <CellTemplate>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.RemoveRedEye" OnClick="() => OpenEditContactPageAsync(context.Item)"/>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Remove" OnClick="() => DeleteOrganizationAsync(context.Item)"/>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="OrganizationDto" />
            </PagerContent>
        </MudDataGrid>
    </MudCardContent>
</MudCard>
<MudThemeProvider/>
<MudDialogProvider/>

@*
<Offcanvas @ref="offcanvasRef" ShowBackdrop Closing="@OnOffcanvasClosing">
    <OffcanvasHeader>
        Offcanvas Start
        <CloseButton Clicked="@HideOffcanvas"/>
    </OffcanvasHeader>
    <OffcanvasBody>
        <Div Padding="Padding.Is3">
            Offcanvas Content
        </Div>
        <Div Padding="Padding.Is3">
            <Button Color="Color.Secondary" Clicked="@HideOffcanvas">This will close the offcanvas</Button>
            <Button Color="Color.Primary" Clicked="@TryHideOffcanvas">This will not</Button>
        </Div>
    </OffcanvasBody>
</Offcanvas>
<Button Color="Color.Primary" Clicked="@ShowOffcanvas">Show Offcanvas</Button>*@


@code {
    /*private Offcanvas offcanvasRef;

    private bool cancelClose;

    private Task ShowOffcanvas()
    {
        return offcanvasRef.Show();
    }

    private Task HideOffcanvas()
    {
        cancelClose = false;

        return offcanvasRef.Hide();
    }

    private Task TryHideOffcanvas()
    {
        cancelClose = true;

        return offcanvasRef.Hide();
    }

    private Task OnOffcanvasClosing(OffcanvasClosingEventArgs e)
    {
        // just set Cancel to prevent offcanvas from closing
        e.Cancel = cancelClose
                   || e.CloseReason != CloseReason.UserClosing;

        return Task.CompletedTask;
    }
    */

}