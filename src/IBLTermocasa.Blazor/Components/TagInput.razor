@using System.Threading
@using MudBlazor
@using Color = MudBlazor.Color

<MudAutocomplete T="string"
                 @ref="_Autocomplete"
                 ValueChanged="tag => ValueSelected(tag)"
                 Value="@selectedTag"
                 Label="Search..."
                 Variant="Variant.Outlined"
                 Dense="true"
                 CoerceValue="true"
                 CoerceText="false"
                 SearchFunc="OnSearchChanged">
    <ItemTemplate>
        @context
    </ItemTemplate>
</MudAutocomplete>

@if (showAddButton)
{
    <MudButton OnClick="AddItem" Color="Color.Info">
        Aggiungi: @selectedTag.ToUpper()
    </MudButton>
}

<MudChipSet T="string">
    @foreach (var item in Tags)
    {
        <MudChip T="string" OnClose="@(e => RemoveItem(item))">@item</MudChip>
    }
</MudChipSet>

@code {
    private MudAutocomplete<string> _Autocomplete;
    [Parameter]
    public List<string> Tags { get; set; }
    private List<string> listTagsToSelection = new();
    private bool showAddButton = false;
    private string selectedTag;

    protected override async Task OnInitializedAsync()
    {
        // Preimpostazione dei dati
        listTagsToSelection = new List<string>
        {
            "Italy",
            "Germany",
            "France",
            "Spain",
            "United Kingdom"
        };

        // Preimpostazione dei dati di selezione
        if (Tags.IsNullOrEmpty())
        {
            Tags = new List<string> { listTagsToSelection[1], listTagsToSelection[3] };
        }
        await base.OnInitializedAsync();
    }
    
    private void ValueSelected(string arg)
    {
        selectedTag = arg ?? string.Empty;

        if (!Tags.Any(x => x.Equals(selectedTag, StringComparison.CurrentCultureIgnoreCase)))
        {
            showAddButton = true;
        }
        StateHasChanged();
    }

    private async Task<IEnumerable<string>> OnSearchChanged(string searchText, CancellationToken token)
    {
        if (listTagsToSelection == null || listTagsToSelection.Count == 0)
            return new List<string>();

        return await Task.Run(() =>
        {
            // Verifica se la ricerca è stata annullata
            token.ThrowIfCancellationRequested();

            // Filtra i risultati in base al testo di ricerca
            var result = string.IsNullOrEmpty(searchText)
                ? listTagsToSelection
                : listTagsToSelection
                    .Where(c => c.Contains(searchText, StringComparison.CurrentCultureIgnoreCase))
                    .ToList();

            // Mostra il pulsante se il testo di ricerca non è vuoto e non esiste già in Tags (case-insensitive)
            showAddButton = !string.IsNullOrWhiteSpace(searchText) &&
                            !Tags.Any(x => x.Equals(searchText, StringComparison.CurrentCultureIgnoreCase));

            return result.AsEnumerable();
        }, token);
    }


    private void AddItem()
    {
        var newItem = selectedTag;

        // Aggiungi il nuovo tag alla lista
        if (!Tags.Any(c => c.Equals(newItem, StringComparison.CurrentCultureIgnoreCase)))
        {
            Tags.Add(newItem);
            if (listTagsToSelection.All(c => !c.Equals(newItem, StringComparison.CurrentCultureIgnoreCase)))
            {
                listTagsToSelection.Add(newItem);
            }
        }

        showAddButton = false; // Nascondi il pulsante dopo l'aggiunta
        StateHasChanged();
    }

    private void RemoveItem(string itemName)
    {
        // Rimuovi il tag dalla lista
        Tags.Remove(itemName);
    }
}
